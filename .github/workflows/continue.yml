# .github/workflows/milestone-router.yml
name: Milestone Router

concurrency:
  group: "milestones-${{ github.event.issue.number }}"
  cancel-in-progress: false

on:
  issue_comment:
    types: [created]

jobs:
  route:
    if: ${{ startsWith(github.event.comment.body, '/done ') && contains(github.event.issue.labels.*.name, 'newfork') }}
    runs-on: ubuntu-latest
    steps:
      # 0) Extract FORK_REPO from issue body
      - name: Extract FORK from issue body
        id: vars
        env:
          ISSUE_BODY: ${{ github.event.issue.body }}
        run: |
          FORK_REPO="$(echo "$ISSUE_BODY" \
            | grep -oP 'Fork repo: `\K[^`]+')"
          echo "fork_repo=$FORK_REPO" >> "$GITHUB_OUTPUT"

      # 1) Parse the `/done N` command
      - name: Parse slash-command
        id: parse
        uses: actions/github-script@v6
        with:
          result-encoding: json
          script: |
            const body = context.payload.comment.body.trim();
            const m = /^\/done\s+(\d+)/.exec(body);
            if (!m) return { idx: -1 };
            const num = parseInt(m[1], 10);
            const max = 5;
            return { idx: (num >= 1 && num <= max) ? num : -1 };

      # 2) Reveal next milestone by number
      - name: Reveal next milestone
        if: steps.parse.outputs.idx != '-1'
        uses: actions/github-script@v6
        with:
          script: |
            const idx = parseInt("${{ steps.parse.outputs.idx }}", 10);
            const nextNum = idx + 1;
            if (nextNum > 5) return;
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo:  context.repo.repo,
              issue_number: context.issue.number,
              body: context.payload.issue.body +
                    `\n- [ ] ${nextNum}.`
            });
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo:  context.repo.repo,
              issue_number: context.issue.number,
              body: `âœ… Milestone ${idx} done! Next up: milestone ${nextNum}.`
            });

      # 3) Verify milestone 3 (Activate issues) on their fork
      - name: Verify milestone 3
        if: steps.parse.outputs.idx == '3'
        uses: actions/github-script@v6
        env:
          FORK_REPO: ${{ steps.vars.outputs.fork_repo }}
          GH_TOKEN: ${{ secrets.GH_PAT_CROSSREPO }}
        with:
          script: |
            const [owner, repo] = process.env.FORK_REPO.split('/');
            const { data } = await github.rest.repos.get({ owner, repo });
            if (!data.has_issues) {
              // undo
              const undone = context.payload.issue.body.replace(
                /^- \[x\]\s+3\.\s*.*$/m,
                '- [ ] 3.'
              );
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo:  context.repo.repo,
                issue_number: context.issue.number,
                body: undone
              });
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo:  context.repo.repo,
                issue_number: context.issue.number,
                body: 'ðŸš« Milestone 3 not complete. Please enable Issues on your fork, then `/done 3` again.'
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo:  context.repo.repo,
                issue_number: context.issue.number,
                body: 'ðŸŽ‰ Milestone 3 complete!'
              });
            }

      # 4) Verify milestone 4 (Close an issue) on their fork
      - name: Verify milestone 4
        if: steps.parse.outputs.idx == '4'
        uses: actions/github-script@v6
        env:
          FORK_REPO: ${{ steps.vars.outputs.fork_repo }}
        with:
          script: |
            const [owner, repo] = process.env.FORK_REPO.split('/');
            const res = await github.rest.issues.listForRepo({
              owner, repo, creator: context.actor, state: 'closed'
            });
            if (res.data.length === 0) {
              const undone = context.payload.issue.body.replace(
                /^- \[x\]\s+4\.\s*.*$/m,
                '- [ ] 4.'
              );
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo:  context.repo.repo,
                issue_number: context.issue.number,
                body: undone
              });
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo:  context.repo.repo,
                issue_number: context.issue.number,
                body: 'ðŸš« Milestone 4 not complete. Close an issue on your fork, then `/done 4` again.'
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo:  context.repo.repo,
                issue_number: context.issue.number,
                body: 'ðŸŽ‰ Milestone 4 complete!'
              });
            }

      # 5) Verify milestone 5 (Create an issue) on their fork
      - name: Verify milestone 5
        if: steps.parse.outputs.idx == '5'
        uses: actions/github-script@v6
        env:
          FORK_REPO: ${{ steps.vars.outputs.fork_repo }}
        with:
          script: |
            const [owner, repo] = process.env.FORK_REPO.split('/');
            const res = await github.rest.issues.listForRepo({
              owner, repo, creator: context.actor, state: 'open'
            });
            if (res.data.length === 0) {
              const undone = context.payload.issue.body.replace(
                /^- \[x\]\s+5\.\s*.*$/m,
                '- [ ] 5.'
              );
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo:  context.repo.repo,
                issue_number: context.issue.number,
                body: undone
              });
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo:  context.repo.repo,
                issue_number: context.issue.number,
                body: 'ðŸš« Milestone 5 not complete. Create an issue on your fork, then `/done 5` again.'
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo:  context.repo.repo,
                issue_number: context.issue.number,
                body: 'ðŸŽ‰ Milestone 5 complete!'
              });
            }
