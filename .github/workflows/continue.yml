# .github/workflows/milestone-router.yml
name: Milestone Router

concurrency:
  group: "milestones-${{ github.event.issue.number  }}"
  cancel-in-progress: false

on:
  issue_comment:
    types: [created]

jobs:
  route:
    if: ${{ startsWith(github.event.comment.body, '/done ') && contains(github.event.issue.labels.*.name, 'newfork') }}
    runs-on: ubuntu-latest
    steps:
      # 0) Extract FORK_REPO from issue body
      - name: Extract FORK from issue body
        id: vars
        env:
          ISSUE_BODY: ${{ github.event.issue.body }}
        run: |
          FORK_REPO="$(echo "$ISSUE_BODY" \
            | grep -oP 'Fork repo: `\K[^`]+')"
          echo "Extracted fork repo: $FORK_REPO"
          echo "fork_repo=$FORK_REPO" >> "$GITHUB_OUTPUT"

      # 1) Parse the `/done N` command
      - name: Parse slash-command
        id: parse
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            // 1) Grab body and regex all numbered tasks
            const body = context.payload.issue.body;
            const taskRe = /^\s*-\s*\[[ x]\]\s*(\d+)\./gm;
            let m, nums = [];
            while ((m = taskRe.exec(body)) !== null) {
              nums.push(parseInt(m[1], 10));
            }
            if (nums.length === 0) return '-1';
            
            // 2) Determine max number from the list
            const max = Math.max(...nums);

            // 3) Parse the /done M command
            const cmd = context.payload.comment.body.trim();
            const cm = /^\/done\s+(\d+)/.exec(cmd);
            if (!cm) return '-1';
            const num = parseInt(cm[1], 10);

            // 4) Validate range
            if (num < 1 || num > max) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo:  context.repo.repo,
                issue_number: context.issue.number,
                body: `🚫 Invalid milestone number. Please pick a number between 1 and ${max}.`
              });
              return '-1';
            }

            // 5) OK—return it
            return String(num);
      - name: Verify milestone 3
        if: steps.parse.outputs.result == '3'
        uses: actions/github-script@v7
        env:
          FORK_REPO: ${{ steps.vars.outputs.fork_repo }}
        with:
          github-token: ${{ secrets.GH_PAT_CROSSREPO }}
          script: |
            const [owner, repo] = process.env.FORK_REPO.split('/');
            const { data } = await github.rest.repos.get({ owner, repo });

            if (!data.has_issues) {
              // failure feedback only
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: '🚫 Milestone 3 not complete. Please enable Issues on your fork, then `/done 3` again.'
              });
            } else {
              // 1) Cross off milestone 3 in the upstream issue body
              let updatedBody = context.payload.issue.body
                .replace(/^(\s*-\s*\[)\s\](\s*3\..*)$/m, '$1x]$2')
                .replace(/(\n*<img)/, '\n- [ ] 4. Create an issue$1');
              
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo:  context.repo.repo,
                issue_number: context.issue.number,
                body: updatedBody
              });
              
              // 3) Create a new issue in the fork for them to "create your own first issue"
              const onboardingUrl = context.payload.issue.html_url;
              const issueBodyLines = [
                'Great work on enabling issues! Now create your first one.',
                '',
                '**Task:** Create a new issue in this repository titled "introduction needed"',
                '',
                `**Next:** Comment \`/done 4\` here: ${onboardingUrl}`,
                '',
                '---',
                '',
                'This helps you practice the basics of issue creation.',
                'Go to the Issues tab, click "New Issue", and use that exact title.',
                '',
                'Feel free to add a brief introduction about yourself, what brings you to this workshop and what you\'re hoping to learn?',
                '',
                '',
                '<img src="https://raw.githubusercontent.com/HannesDiemerling/repro-collab/main/gifs/make_issue.gif" alt="Make Issues GIF">',
              ];

              const newIssue = await github.rest.issues.create({
                owner: owner,
                repo:  repo,
                title: 'Create your own first issue',
                body: issueBodyLines.join('\n')
              });

              // 4) Celebrate in the upstream issue with link to new issue
              const milestone3BodyLines = [
                '🎉 Milestone 3 complete - "Activate issues"!',
                '',
                `**Task:** Milestone 4 is now available, and your first-issue template is waiting in your fork, look into it: ${newIssue.data.html_url}`,
              ];
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo:  context.repo.repo,
                issue_number: context.issue.number,
                body: milestone3BodyLines.join('\n')
              });
            }
      - name: Verify milestone 4
        if: steps.parse.outputs.result == '4'
        uses: actions/github-script@v7
        env:
          FORK_REPO: ${{ steps.vars.outputs.fork_repo }}
        with:
          github-token: ${{ secrets.GH_PAT_CROSSREPO }}
          script: |
            const [owner, repo] = process.env.FORK_REPO.split('/');
            const target = 'introduction needed';

            // 1) Grab the last 10 issues (all states)
            const { data: recent } = await github.rest.issues.listForRepo({
              owner, repo,
              state: 'all',
              per_page: 10,
              sort: 'created',
              direction: 'desc'
            });

            // 2) Try exact match
            let found = recent.find(i => i.title.toLowerCase() === target);

            // 3) If no exact, run Levenshtein ≤3
            if (!found) {
              const lev = (a, b) => {
                const dp = Array.from({ length: a.length + 1 }, () => []);
                for (let i = 0; i <= a.length; i++) dp[i][0] = i;
                for (let j = 0; j <= b.length; j++) dp[0][j] = j;
                for (let i = 1; i <= a.length; i++) {
                  for (let j = 1; j <= b.length; j++) {
                    dp[i][j] = a[i-1] === b[j-1]
                      ? dp[i-1][j-1]
                      : 1 + Math.min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]);
                  }
                }
                return dp[a.length][b.length];
              };
              found = recent.find(i => lev(i.title.toLowerCase(), target) <= 3);
            }

            // 4) If still not found → error
            if (!found) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo:  context.repo.repo,
                issue_number: context.issue.number,
                body: `🚫 Milestone 4 not complete. Please open an issue called “Introduction needed” in your fork and then run \`/done 4\` again.`
              });
              return;
            }

            // 5) Cross off “4.”, reveal “5.”
            const updated = context.payload.issue.body
              .replace(/^(\s*-\s*\[)\s\](\s*4\..*)$/m, '$1x]$2')
              .replace(/(\n*<img)/, '\n- [ ] 5. Close an issue$1');

            await github.rest.issues.update({
              owner: context.repo.owner,
              repo:  context.repo.repo,
              issue_number: context.issue.number,
              body: updated
            });

            // 6) Celebrate
            const forkIssues = await github.rest.issues.listForRepo({
              owner, repo,
              state: 'open',
              per_page: 10
            });
            const firstIssue = forkIssues.data.find(i =>
              i.title.toLowerCase() === 'create your own first issue'
            );
            const firstIssueUrl = firstIssue.html_url;
            const milestone4BodyLines = [
              '🎉 Milestone 4 complete - "Open a issue"!',
              '',
              `**Task:** Milestone 5 is now available, go back to your first Issue read the new comment: ${firstIssueUrl}`,
            ];
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo:  context.repo.repo,
              issue_number: context.issue.number,
              body: milestone4BodyLines.join('\n')
            });

            // 7) Notify the "Create your own first issue" in the fork
            const onboardingUrl = context.payload.issue.html_url;
            if (firstIssue) {
              await github.rest.issues.createComment({
                owner, repo,
                issue_number: firstIssue.number,
                body: `@${context.actor}, you’ve completed step 4, now close this issue and comment \`/done 5\` here: ${onboardingUrl}!`
              });
            }
    # 5.1) Verify "Create your own first issue" is closed in the fork
      - name: Verify milestone 5
        id: verify-5
        if: steps.parse.outputs.result == '5'
        uses: actions/github-script@v7
        env:
          FORK_REPO: ${{ steps.vars.outputs.fork_repo }}
        with:
          github-token: ${{ secrets.GH_PAT_CROSSREPO }}
          script: |
            const [forkOwner, forkRepo] = process.env.FORK_REPO.split('/');

            // 1) First verify the "Create your own first issue" is closed
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: forkOwner, repo: forkRepo, state: 'all', per_page: 100
            });
            const intro = issues.find(i =>
              i.title.toLowerCase() === 'create your own first issue'
            );

            if (!intro || intro.state !== 'closed') {
              const url = intro
                ? intro.html_url
                : `https://github.com/${forkOwner}/${forkRepo}/issues`;
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `🚫 Milestone 5 not complete. Please close ["Create your own first issue"](${url}) in your fork, then run \`/done 5\` again.`
              });
              return; // Exit early
            }

            // 2) Extract the fork SHA from the issue body
            const issueBody = context.payload.issue.body;
            const shaMatch = issueBody.match(/Fork sha:\s*`([a-f0-9]{40})`/);
            if (!shaMatch) {
              throw new Error('Could not find fork SHA in issue body');
            }
            const forkSha = shaMatch[1];

            // 3) Store branch name for next step
            const timestamp = Date.now();
            const branchName = `onboarding/pr-${context.actor}-${timestamp}`;
            core.setOutput('branch_name', branchName);
            core.setOutput('fork_sha', forkSha);
            core.setOutput('fork_owner', forkOwner);
            core.setOutput('fork_repo', forkRepo);

      - name: Create branch and commit with upstream permissions
        id: create-branch
        if: steps.parse.outputs.result == '5' && steps.verify-5.outputs.branch_name
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_PAT_UPSTREAM }}
          script: |
            const branchName = '${{ steps.verify-5.outputs.branch_name }}';
            const forkSha = '${{ steps.verify-5.outputs.fork_sha }}';
            const { data: mainRef } = await github.rest.git.getRef({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    ref: 'heads/main'
                  });
            const mainSha = mainRef.object.sha;

            // Create branch in upstream from fork SHA
            await github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `refs/heads/${branchName}`,
              sha: mainSha
            });

            // Fixed preregistration content
            const preregistrationLines = [
              '# Preregistration',
              '',
              '## Study Overview',
              'This study aims to replicate Stevens\' Power Law for size perception.',
              '',
              '## Hypotheses',
              'We hypothesize that perceived size will follow a power function with an exponent different from 1.',
              '',
              '## Methods',
              'Participants will compare squares of different sizes and judge which is larger.',
              '',
              '## Analysis Plan',
              'We will fit a power function to the data and examine the exponent.',
              '',
              '## Sample Size',
              'We aim to collect data from all workshop participants.',
              '',
              '---',
              `Last updated: ${new Date().toISOString()}`
            ];
            const preregistrationContent = preregistrationLines.join('\n');
            
            
            // Get current file SHA if it exists
            let fileSha = null;
            try {
              const { data: file } = await github.rest.repos.getContent({
                owner: context.repo.owner,
                repo: context.repo.repo,
                path: 'preregistration.md',
                ref: branchName
              });
              fileSha = file.sha;
            } catch (e) {
              // File doesn't exist, which is fine
            }
            
            // Overwrite the file
            await github.rest.repos.createOrUpdateFileContents({
              owner: context.repo.owner,
              repo: context.repo.repo,
              path: 'preregistration.md',
              message: `Update preregistration for ${context.actor}`,
              content: Buffer.from(preregistrationContent).toString('base64'),
              branch: branchName,
              sha: fileSha
            });
              core.setOutput('branch_name', branchName);

            
      - name: Create PR and update issue
        if: steps.parse.outputs.result == '5' && steps.create-branch.outputs.branch_name
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_PAT_CROSSREPO }}
          script: |
            const branchName = '${{ steps.verify-5.outputs.branch_name }}';
            const forkOwner = '${{ steps.verify-5.outputs.fork_owner }}';
            const forkRepo = '${{ steps.verify-5.outputs.fork_repo }}';

            // Get fork's default branch
            const { data: forkData } = await github.rest.repos.get({
              owner: forkOwner,
              repo: forkRepo
            });
            const forkDefaultBranch = forkData.default_branch;

            // Create PR from upstream branch to fork
            const { data: pr } = await github.rest.pulls.create({
              owner: forkOwner,
              repo: forkRepo,
              title: 'Review this preregistration update',
              head: `${context.repo.owner}:${branchName}`,
              base: forkDefaultBranch,
              body: `Congratulations on completing milestone 5! 🎉

              This PR updates the preregistration document. Please review this change and practice the PR review process.

              **Your task:** Review this PR and either:
              - Approve it if everything looks good
              - Request changes if you spot any issues
              - Add comments to discuss the changes
              
              Once you're satisfied, merge this PR and then run \`/done 6\` in the upstream issue.`,
              maintainer_can_modify: true
            });
              
            // Update the upstream issue checklist
            const updatedBody5 = context.payload.issue.body
                .replace(/^(\s*-\s*\[)\s\](\s*5\..*)$/m, '$1x]$2')
                .replace(/(\n*<img)/, '\n- [ ] 6. Review and merge a PR$1');
              
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: updatedBody5
            });
              
            // Comment on the upstream issue
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `🎉 Milestone 5 complete! 
              
              I've created a pull request in your fork: ${pr.html_url}
              
              Please review and merge this PR to practice the collaborative development workflow, then run \`/done 6\` to continue.`
            });
