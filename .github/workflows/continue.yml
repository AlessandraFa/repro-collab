# .github/workflows/milestone-router.yml
name: Milestone Router

concurrency:
  group: "milestones-${{ github.event.issue.number }}"
  cancel-in-progress: false

on:
  issue_comment:
    types: [created]

jobs:
  route:
    if: ${{ startsWith(github.event.comment.body, '/done ') && contains(github.event.issue.labels.*.name, 'newfork') }}
    runs-on: ubuntu-latest
    steps:
      # 0) Extract FORK_REPO from issue body
      - name: Extract FORK from issue body
        id: vars
        env:
          ISSUE_BODY: ${{ github.event.issue.body }}
        run: |
          FORK_REPO="$(echo "$ISSUE_BODY" \
            | grep -oP 'Fork repo: `\K[^`]+')"
          echo "fork_repo=$FORK_REPO" >> "$GITHUB_OUTPUT"

      # 1) Parse the `/done N` command
      - name: Parse slash-command
        id: parse
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            // 1) Grab body and regex all numbered tasks
            const body = context.payload.issue.body;
            const taskRe = /^\s*-\s*\[[ x]\]\s*(\d+)\./gm;
            let m, nums = [];
            while ((m = taskRe.exec(body)) !== null) {
              nums.push(parseInt(m[1], 10));
            }
            if (nums.length === 0) return '-1';
            
            // 2) Determine max number from the list
            const max = Math.max(...nums);

            // 3) Parse the /done M command
            const cmd = context.payload.comment.body.trim();
            const cm = /^\/done\s+(\d+)/.exec(cmd);
            if (!cm) return '-1';
            const num = parseInt(cm[1], 10);

            // 4) Validate range
            if (num < 1 || num > max) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo:  context.repo.repo,
                issue_number: context.issue.number,
                body: `🚫 Invalid milestone number. Please pick a number between 1 and ${max}.`
              });
              return '-1';
            }

            // 5) OK—return it
            return String(num);
      - name: Verify milestone 3
        if: steps.parse.outputs.result == '3'
        uses: actions/github-script@v7
        env:
          FORK_REPO: ${{ steps.vars.outputs.fork_repo }}
        with:
          github-token: ${{ secrets.GH_PAT_CROSSREPO }}
          script: |
            const [owner, repo] = process.env.FORK_REPO.split('/');
            const { data } = await github.rest.repos.get({ owner, repo });

            if (!data.has_issues) {
              // failure feedback only
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: '🚫 Milestone 3 not complete. Please enable Issues on your fork, then `/done 3` again.'
              });
            } else {
              // 1) Cross off milestone 3 in the upstream issue body
              let updatedBody = context.payload.issue.body.replace(
                // match only the checkbox for "3."
                /^(\s*-\s*\[)\s\](\s*3\..*)$/m,
                '$1x]$2'
              );
              
              // 2) Reveal milestone 4 in that same list
              updatedBody += '\n- [ ] 4. Close an issue';

              await github.rest.issues.update({
                owner: context.repo.owner,
                repo:  context.repo.repo,
                issue_number: context.issue.number,
                body: updatedBody
              });
              
              // 3) Celebrate in the upstream issue
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo:  context.repo.repo,
                issue_number: context.issue.number,
                body: '🎉 Milestone 3 complete—“Activate issues”! Milestone 4 is now available, and your first-issue template is waiting in your fork.'
              });

              // 4) Create a new issue in the fork for them to "create your own first issue"
              const onboardingUrl = context.payload.issue.html_url;
              await github.rest.issues.create({
                owner: owner,
                repo:  repo,
                title: 'Create your own first issue',
                body: `👋 Great work on enabling issues! Now, please create your very first issue in this fork. \n\nRelated: ${onboardingUrl}`
              });
            }
