# .github/workflows/milestone-router.yml
name: Milestone Router

concurrency:
  group: "milestones-${{ github.event.issue.number  }}"
  cancel-in-progress: false

on:
  issue_comment:
    types: [created]

jobs:
  route:
    if: ${{ startsWith(github.event.comment.body, '/done ') && contains(github.event.issue.labels.*.name, 'newfork') }}
    runs-on: ubuntu-latest
    steps:
      # 0) Extract FORK_REPO from issue body
      - name: Extract FORK from issue body
        id: vars
        env:
          ISSUE_BODY: ${{ github.event.issue.body }}
        run: |
          FORK_REPO="$(echo "$ISSUE_BODY" \
            | grep -oP 'Fork repo: `\K[^`]+')"
          echo "Extracted fork repo: $FORK_REPO"
          echo "fork_repo=$FORK_REPO" >> "$GITHUB_OUTPUT"

      # 1) Parse the `/done N` command
      - name: Parse slash-command
        id: parse
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_PAT_CROSSREPO }}
          result-encoding: string
          script: |
            // 1) Grab body and regex all numbered tasks
            const body = context.payload.issue.body;
            const taskRe = /^\s*-\s*\[[ x]\]\s*(\d+)\./gm;
            let m, nums = [];
            while ((m = taskRe.exec(body)) !== null) {
              nums.push(parseInt(m[1], 10));
            }
            if (nums.length === 0) return '-1';
            
            // 2) Determine max number from the list
            const max = Math.max(...nums);

            // 3) Parse the /done M command
            const cmd = context.payload.comment.body.trim();
            const cm = /^\/done\s+(\d+)/.exec(cmd);
            if (!cm) return '-1';
            const num = parseInt(cm[1], 10);

            // 4) Validate range
            if (num < 1 || num > max) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo:  context.repo.repo,
                issue_number: context.issue.number,
                body: `🚫 Invalid milestone number. Please pick a number between 1 and ${max}.`
              });
              return '-1';
            }

            // 5) OK—return it
            return String(num);
      - name: Verify milestone 3
        if: steps.parse.outputs.result == '3'
        uses: actions/github-script@v7
        env:
          FORK_REPO: ${{ steps.vars.outputs.fork_repo }}
        with:
          github-token: ${{ secrets.GH_PAT_CROSSREPO }}
          script: |
            const [owner, repo] = process.env.FORK_REPO.split('/');
            const { data } = await github.rest.repos.get({ owner, repo });

            if (!data.has_issues) {
              // failure feedback only
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: '🚫 Milestone 3 not complete. Please enable Issues on your fork, then `/done 3` again.'
              });
            } else {
              // 1) Cross off milestone 3 in the upstream issue body
              let updatedBody = context.payload.issue.body
                .replace(/^(\s*-\s*\[)\s\](\s*3\..*)$/m, '$1x]$2')
                .replace(/\n*<img[^>]*>.*$/m, '\n- [ ] 4. Create an issue');

                //.replace(/\n*<img[^>]*>.*$/m, `\n- [ ] 4. Create an issue\n\n<img src="https://${context.repo.owner}.github.io/${context.repo.repo}/assets/create_issue.gif" alt="Create Issue GIF">`);
              
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo:  context.repo.repo,
                issue_number: context.issue.number,
                body: updatedBody,
                state: 'open'
              });
              
              // 3) Create a new issue in the fork for them to "create your own first issue"
              const preregistrationUrl = context.payload.issue.html_url;
              const issueBodyLines = [
                'Great work on enabling issues! Now create your first one.',
                '', 
                'In collaborative writing projects on GitHub, issues are the central way to coordinate work and communicate with your collaborators.', 
                'For example, you might want to create an issue to remind yourself (and your collaborators) that your project doesn\'t yet have a preregistration.',
                '', 
                'In issues (as in many GitHub tools), text is formatted in Markdown. Markdown lets you write plain text while adding simple symbols to control formatting, such as **bold**, *italics*, or headings.',
                `
            \`\`\`markdown
            # A heading

            A list:

            * apple
            * banana

            **bold**
            *italic*

            A todo list:

            - [x] done
            - [ ] todo

            For Git's sake, put each sentence on its own line.
            Please.
            I beg you.
            \`\`\`
                `,
                'You can find an overview of Markdown formatting options [here](https://media.datacamp.com/legacy/image/upload/v1697797990/Marketing/Blog/Markdown_Cheat_Sheet.pdf).',
                '',
                '**Task:** Create a new issue in your repository!',
                '- Go to the **Issues** tab.', 
                '- Click **New Issue**.', 
                '- Use this exact title: **Preregistration needed**.', 
                '- Add a brief introduction about yourself, what brings you to this workshop and what you\'re hoping to learn. Make sure to try different Markdown formatting options!', 
                '', 
                `**Afterwards:** Return to this issues and comment \`/done 4\` here: ${preregistrationUrl}`,
                '',
                `<img src="https://${context.repo.owner}.github.io/${context.repo.repo}/assets/create_issue.gif" alt="Make Issues GIF">`,
              ];

              const newIssue = await github.rest.issues.create({
                owner: owner,
                repo:  repo,
                title: 'Create your own first issue',
                body: issueBodyLines.join('\n')
              });

              // 4) Celebrate in the upstream issue with link to new issue
              const milestone3BodyLines = [
                '🎉 Milestone 3 complete - "Activate issues"!',
                '',
                `**Task:** Milestone 4 is now available, and an issue is waiting in your fork, look into it: ${newIssue.data.html_url}`,
                '',
                `**Afterwards:** Comment \`/done 4\` here.`,
                ];
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo:  context.repo.repo,
                issue_number: context.issue.number,
                body: milestone3BodyLines.join('\n')
              });
            }
      - name: Verify milestone 4
        if: steps.parse.outputs.result == '4'
        uses: actions/github-script@v7
        env:
          FORK_REPO: ${{ steps.vars.outputs.fork_repo }}
        with:
          github-token: ${{ secrets.GH_PAT_CROSSREPO }}
          script: |
            const [owner, repo] = process.env.FORK_REPO.split('/');
            const target = 'preregistration needed';

            // 1) Grab the last 10 issues (all states)
            const { data: recent } = await github.rest.issues.listForRepo({
              owner, repo,
              state: 'all',
              per_page: 10,
              sort: 'created',
              direction: 'desc'
            });

            // 2) Try exact match
            let found = recent.find(i => i.title.toLowerCase() === target);

            // 3) If no exact, run Levenshtein ≤3
            if (!found) {
              const lev = (a, b) => {
                const dp = Array.from({ length: a.length + 1 }, () => []);
                for (let i = 0; i <= a.length; i++) dp[i][0] = i;
                for (let j = 0; j <= b.length; j++) dp[0][j] = j;
                for (let i = 1; i <= a.length; i++) {
                  for (let j = 1; j <= b.length; j++) {
                    dp[i][j] = a[i-1] === b[j-1]
                      ? dp[i-1][j-1]
                      : 1 + Math.min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]);
                  }
                }
                return dp[a.length][b.length];
              };
              found = recent.find(i => lev(i.title.toLowerCase(), target) <= 3);
            }

            // 4) If still not found → error
            if (!found) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo:  context.repo.repo,
                issue_number: context.issue.number,
                body: `🚫 Milestone 4 not complete. Please open an issue called “Preregistration needed” in your fork and then run \`/done 4\` again.`
              });
              return;
            }

            // 5) Cross off “4.”, reveal “5.”
            const updated = context.payload.issue.body
              .replace(/^(\s*-\s*\[)\s\](\s*4\..*)$/m, '$1x]$2')
              + '\n- [ ] 5. Close an issue';
              
              //.replace(/\n*<img[^>]*>.*$/m, `\n- [ ] 5. Close an issue\n\n<img src="https://${context.repo.owner}.github.io/${context.repo.repo}/assets/close_issue.gif" alt="Close Issue GIF">`);

            await github.rest.issues.update({
              owner: context.repo.owner,
              repo:  context.repo.repo,
              issue_number: context.issue.number,
              body: updated,
              state: 'open'
            });

            // 6) Celebrate
            const forkIssues = await github.rest.issues.listForRepo({
              owner, repo,
              state: 'open',
              per_page: 10
            });
            const firstIssue = forkIssues.data.find(i =>
              i.title.toLowerCase() === 'create your own first issue'
            );
            const firstIssueUrl = firstIssue.html_url;
            const milestone4BodyLines = [
              '🎉 Milestone 4 complete - "Open a issue"!',
              '',
              `**Task:** Milestone 5 is now available, go back to the issue you just solved, read the new comment, and close the issue: ${firstIssueUrl}`,
              '',
              'Click the "Close issue" button.',
              '',
              `**Afterwards:** Comment \`/done 5\` here.`,
            ];
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo:  context.repo.repo,
              issue_number: context.issue.number,
              body: milestone4BodyLines.join('\n')
            });

            // 7) Notify the "Create your own first issue" in the fork
            const preregistrationUrl = context.payload.issue.html_url;
            if (firstIssue) {
              await github.rest.issues.createComment({
                owner, repo,
                issue_number: firstIssue.number,
                body: `@${context.actor}, you\’ve completed milestone 4!  
                Imagine your collaborators saw your reminder and quickly put together a first draft of the preregistration (how efficient!).
                In the next part of the workshop, you will help refine this preregistration.  
                But first, **close this issue** you since you completed the task. Closing issues when they are are no longer needed is good practice for keeping your repository organized.
                **Task:** Close this issue.
                **Afterwards:** When you closed the issue, comment \`/done 5\` here: ${preregistrationUrl}!`
              });
            }
    # 5.1) Verify "Create your own first issue" is closed in the fork
      - name: Verify milestone 5
        id: verify-5
        if: steps.parse.outputs.result == '5'
        uses: actions/github-script@v7
        env:
          FORK_REPO: ${{ steps.vars.outputs.fork_repo }}
        with:
          github-token: ${{ secrets.GH_PAT_CROSSREPO }}
          script: |
            const [forkOwner, forkRepo] = process.env.FORK_REPO.split('/');

            // 1) First verify the "Create your own first issue" is closed
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: forkOwner, repo: forkRepo, state: 'all', per_page: 100
            });
            const intro = issues.find(i =>
              i.title.toLowerCase() === 'create your own first issue'
            );

            if (!intro || intro.state !== 'closed') {
              const url = intro
                ? intro.html_url
                : `https://github.com/${forkOwner}/${forkRepo}/issues`;
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `🚫 Milestone 5 not complete. Please close ["Create your own first issue"](${url}) in your fork, then run \`/done 5\` again.`
              });
              return; // Exit early
            }

            // 2) Extract the fork SHA from the issue body
            const issueBody = context.payload.issue.body;
            const shaMatch = issueBody.match(/Fork sha:\s*`([a-f0-9]{40})`/);
            if (!shaMatch) {
              throw new Error('Could not find fork SHA in issue body');
            }
            const forkSha = shaMatch[1];

            // 3) Store branch name for next step
            const timestamp = Date.now();
            const branchName = `preregistration/pr-${context.actor}-${timestamp}`;
            core.setOutput('branch_name', branchName);
            core.setOutput('fork_sha', forkSha);
            core.setOutput('fork_owner', forkOwner);
            core.setOutput('fork_repo', forkRepo);

      - name: Create branch and commit with upstream permissions
        id: create-branch
        if: steps.parse.outputs.result == '5' && steps.verify-5.outputs.branch_name
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_PAT_UPSTREAM }}
          script: |
            const branchName = '${{ steps.verify-5.outputs.branch_name }}';
            const forkSha = '${{ steps.verify-5.outputs.fork_sha }}';
            const { data: mainRef } = await github.rest.git.getRef({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    ref: 'heads/main'
                  });
            const mainSha = mainRef.object.sha;

            // Create branch in upstream from fork SHA
            await github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `refs/heads/${branchName}`,
              sha: mainSha
            });
            const { data: preregistration_file } = await github.rest.repos.getContent({
              owner: context.repo.owner,
              repo: context.repo.repo,
              path: 'prereg_draft.md'
            });
            const preregistrationContent = Buffer.from(preregistration_file.content, 'base64').toString();
            
            // Get current file SHA if it exists
            let fileSha = null;
            try {
              const { data: file } = await github.rest.repos.getContent({
                owner: context.repo.owner,
                repo: context.repo.repo,
                path: 'preregistration.md',
                ref: branchName
              });
              fileSha = file.sha;
            } catch (e) {
              // File doesn't exist, which is fine
            }
            
            // Overwrite the file
            await github.rest.repos.createOrUpdateFileContents({
              owner: context.repo.owner,
              repo: context.repo.repo,
              path: 'preregistration.md',
              message: `Update preregistration for ${context.actor}`,
              content: Buffer.from(preregistrationContent).toString('base64'),
              branch: branchName,
              sha: fileSha
            });
              core.setOutput('branch_name', branchName);

      - name: Create PR and update issue
        if: steps.parse.outputs.result == '5' && steps.create-branch.outputs.branch_name
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_PAT_CROSSREPO }}
          script: |
            const branchName = '${{ steps.verify-5.outputs.branch_name }}';
            const forkOwner = '${{ steps.verify-5.outputs.fork_owner }}';
            const forkRepo = '${{ steps.verify-5.outputs.fork_repo }}';

            // Get fork's default branch
            const { data: forkData } = await github.rest.repos.get({
              owner: forkOwner,
              repo: forkRepo
            });
            const forkDefaultBranch = forkData.default_branch;

            const prBodyLines = [
              '### Congratulations on completing milestone 5!',
              '',
              'Next, we\'ll have a look at the draft of the preregistration that your (imaginary) collaborators have prepared.',
              'But before doing so, let\'s learn how this situation came about.', 
              '', 
              'To do so, we need to introduce **branches**. Branches allow collaborators to work independently yet simultaneously on the same project.',
              'How? Each branch is a parallel version of the project where changes can be made without affecting the official version of the project.',
              'The **main branch** usually represents the official version of the project, i.e., the one that reflects the current consensus.', 
              'For example, each collaborator might use their own branch to draft sections of a paper, experiment with changes, or revise text without disrupting others\' work.',
              '', 
              'Once work in a branch is ready, your collaborators (or you) can create a **pull request (PR)**, which is the main tool for requesting feedback on GitHub.', 
              'A pull request shows the changes made in a branch line-by-line and invites collaborators to review, discuss, and suggest improvements.', 
              'When the changes are deemed good, they can be added to the official version.', 
              'This step is called **merging**: it combines the separate branch with the main branch so that both contain the same version of the project.',
              '', 
              'You\’re now inside such a pull request, which means that your collaborators are waiting for your feedback on their preregistration draft.', 
              'In pull requests, you can discuss changes using comments and directly suggest edits to the document. For now, we\'ll practice how to suggest a change in a file within a pull request.', 
              '', 
              '**Task:** Suggest a change to the preregistration file',
              '- Go to the **Files changed** tab of this PR.',
              '- Find the typo in line 12 (empierically).', 
              '- Suggest a correction by clicking the "+" symbol next to the line, typing the correction, and submitting your suggestion.',
              '', 
              `**Afterwards**: Once you\'ve suggested your change, return to ${context.payload.issue.html_url} and comment \`/done 6\` to continue`,
              '',
              '<img src="https://raw.githubusercontent.com/HannesDiemerling/repro-collab/main/gifs/make_suggestion.gif" alt="Make Suggestion GIF">'
            ];

            // Create PR from upstream branch to fork
            const { data: pr } = await github.rest.pulls.create({
              owner: forkOwner,
              repo: forkRepo,
              title: 'Review this preregistration update',
              head: `${context.repo.owner}:${branchName}`,
              base: forkDefaultBranch,
              body: prBodyLines.join('\n'),
              maintainer_can_modify: true
            });
              
            // Update the upstream issue checklist
            const updatedBody5 = context.payload.issue.body
                .replace(/^(\s*-\s*\[)\s\](\s*5\..*)$/m, '$1x]$2')
                + '\n- [ ] 6. Add a suggestion to the PR';

                //.replace(/\n*<img[^>]*>.*$/m, `\n- [ ] 6. Review and merge a PR\n\n<img src="https://${context.repo.owner}.github.io/${context.repo.repo}/assets/review_pr.gif" alt="Review PR GIF">`);
              
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: updatedBody5,
              state: 'open'
            });

            // Comment on the upstream issue
            const milestone5BodyLines = [
              '🎉 Milestone 5 complete - "Close an issue"!',
              '',
              `**Task:** Milestone 6 is now available. Review the pull request (PR) I created in your fork: ${pr.html_url}`,
              '',
              'Add a suggestion to improve the code using GitHub\'s suggestion feature, more detail in our PR.',
              '',
              `**Afterwards:** Comment \`/done 6\` here.`,
            ];
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: milestone5BodyLines.join('\n')
            });
            

      - name: Add a PR Suggestion
        if: steps.parse.outputs.result == '6'
        uses: actions/github-script@v7
        env:
          FORK_REPO: ${{ steps.vars.outputs.fork_repo }}
        with:
          github-token: ${{ secrets.GH_PAT_CROSSREPO }}
          script: |
            const [owner, repo] = process.env.FORK_REPO.split('/');
            
            // Find the PR we created
            const { data: prs } = await github.rest.pulls.list({
              owner, repo,
              state: 'all',
              per_page: 20,
              sort: 'created',
              direction: 'desc'
            });
            
            const pr = prs.find(pr =>
              pr.title === 'Review this preregistration update'
            );
            
            if (!pr) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: '🚫 Could not find the PR. Please check your fork for the preregistration PR.'
              });
              return;
            }
            
            // Check for review comments with suggestions
            const { data: reviews } = await github.rest.pulls.listReviews({
              owner, repo,
              pull_number: pr.number
            });
            
            let hasSuggestion = false;
            for (const review of reviews) {
              const { data: comments } = await github.rest.pulls.listCommentsForReview({
                owner, repo,
                pull_number: pr.number,
                review_id: review.id
              });
              
              if (comments.some(c => c.body.includes('```suggestion'))) {
                hasSuggestion = true;
                break;
              }
            }
            
            // Also check single comments
            if (!hasSuggestion) {
              const { data: prComments } = await github.rest.pulls.listReviewComments({
                owner, repo,
                pull_number: pr.number
              });
              
              hasSuggestion = prComments.some(c => c.body.includes('```suggestion'));
            }
            
            if (!hasSuggestion) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `🚫 Milestone 6 not complete. Please add a suggestion to the PR using GitHub's suggestion feature. Go to the "Files changed" tab in your PR: ${pr.html_url}, click on a line and add a suggestion, then run \`/done 6\` again.`
              });
              return;
            }
            
            // Update issue body
            const updatedBody6 = context.payload.issue.body
              .replace(/^(\s*-\s*\[)\s\](\s*6\..*)$/m, '$1x]$2')
              + '\n- [ ] 7. Merge the pull request';
            
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: updatedBody6,
              state: 'open'
            });
            
            // Success comment
            const milestone6BodyLines = [
              '🎉 Milestone 6 complete - "Add a PR suggestion"!',
              '',
              `**Task:** Milestone 7 is now available. Time to merge your pull request: ${pr.html_url}`,
              '',
              'Click the "Merge pull request" button to complete the PR workflow.',
              '',
              `**Afterwards**: comment \`/done 7\` here.`
            ];
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: milestone6BodyLines.join('\n')
            });
 
      - name: Merge PR
        if: steps.parse.outputs.result == '7'
        uses: actions/github-script@v7
        env:
          FORK_REPO: ${{ steps.vars.outputs.fork_repo }}
        with:
          github-token: ${{ secrets.GH_PAT_CROSSREPO }}
          script: |
            const [owner, repo] = process.env.FORK_REPO.split('/');
            
            // Check if preregistration.md file exists in the fork
            let preregExists = false;
            try {
              const { data: file } = await github.rest.repos.getContent({
                owner, repo,
                path: 'preregistration.md'
              });
              preregExists = true;
            } catch (error) {
              // File doesn't exist
            }
            
            if (!preregExists) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `🚫 Milestone 7 not complete. Please merge or close the pull request: ${ourPr.html_url}. Make sure all checks have passed, then click "Merge pull request" and run \`/done 7\` again.`
              });
              return;
            }
            
            // Cross off “7.”, reveal “8.”
            const updatedBody7 = context.payload.issue.body
              .replace(/^(\s*-\s*\[)\s\](\s*7\..*)$/m, '$1x]$2')
              + '\n- [ ] 8. Find your group';
            
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: updatedBody7,
              state: 'open'
            });
            
            // Final success comment
            const workshopCompleteLines = [
              `🎉 **Congratulations @${context.actor}!** 🎉`,
              '',
              'You completed everything you can do alone:',
              '',
              'You\'ve mastered:',
              '- ✅ Forking repositories',
              '- ✅ Handling issues',
              '- ✅ Reviewing & merging PRs',
              '',
              'Now you need a partner. The goal of the next task is to find a partner with a different experience level.',
              '',
              '---',
              '',
              '**Task**: Stand up and move to the marked corner.',
              '',
              '1. ➡️ Form a line.',
              '2. ➡️ Discuss with your neighbor the following questions:',
              '    * What makes an ideal issue?',
              '    * How can issues be used to organize tasks and responsibilities?',
              '    * Imagine you want to give feedback to your student, collaborator, etc. how do usually provide it? How could you use GitHub?',
              '    * What can you use PRs for?',
              '    * What aspects of your workflow are difficult to translate to GitHub?',
              '3. ➡️ When you are done with the discussion, move down to the other end of the line and chose a partner',
              '4. ➡️ Participate in their discussion till the time is up.',
              '',
              `<img src="https://${context.repo.owner}.github.io/${context.repo.repo}/assets/pair-finding.svg" alt="Visual explanation of the partner finding exercise.">`,
              '',
              `**Afterwards**: comment \`/done 8\` here.`
              ];

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: workshopCompleteLines.join('\n')
            });
      # Milestone 8: Build groups
      - name: Verify milestone 8
        if: steps.parse.outputs.result == '8'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_PAT_CROSSREPO }}
          script: |
            // Cross off “8.”, reveal “9.”
            const updatedBody8 = context.payload.issue.body
              .replace(/^(\s*-\s*\[)\s\](\s*8\..*)$/m, '$1x]$2')
              + '\n- [ ] 9. Generate and Upload Steven Data.';
            
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: updatedBody8,
              state: 'open'
            });
            
            // Success comment
            const milestone8BodyLines = [
              '🎉 Great that you found your partner!',
              '',
              '**Milestone 9 is now available: Generate data together**',
              '',
              'In this milestone, you will:',
              '1. Use a Shiny app to gather data',
              '2. Upload the data to the **less experienced** partner\'s fork',
              '3. Collaborate on managing the data',
              '',
              '**Important:** Only the less experienced GitHub user should run `/done 9` after completing all tasks.',
              '',
              'I\'ll create an issue with detailed instructions for you now.'
            ];
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: milestone8BodyLines.join('\n')
            });

      # Milestone 9: Generate and upload data + Auto-trigger Milestone 10
      - name: Verify milestone 9 and auto-trigger milestone 10
        if: steps.parse.outputs.result == '9'
        uses: actions/github-script@v7
        env:
          FORK_REPO: ${{ steps.vars.outputs.fork_repo }}
        with:
          github-token: ${{ secrets.GH_PAT_CROSSREPO }}
          script: |
            const [owner, repo] = process.env.FORK_REPO.split('/');
            
            // 1) Check for 2 contributors (excluding upstream contributors)
            const { data: contributors } = await github.rest.repos.listContributors({
              owner, repo,
              per_page: 100
            });
            
            // Get upstream contributors to exclude
            const { data: upstreamContributors } = await github.rest.repos.listContributors({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });
            
            const upstreamLogins = upstreamContributors.map(c => c.login.toLowerCase());
            
            const validContributors = contributors.filter(c => 
              !upstreamLogins.includes(c.login.toLowerCase())
            );
            
            // Skip check if comment was made by an upstream contributor
            const isUpstreamContributor = upstreamLogins.includes(context.actor.toLowerCase());
            
            if (!isUpstreamContributor && validContributors.length < 2) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: '🚫 Milestone 9 not complete. We need both partners as contributors in the fork. Make sure you both committed something, then run `/done 9` again.'
              });
              return;
            }
            
            // 2) Check for Data folder with files
            let dataFiles = [];
            try {
              const { data: contents } = await github.rest.repos.getContent({
                owner, repo,
                path: 'data'
              });
              
              if (Array.isArray(contents)) {
                dataFiles = contents.filter(item => 
                  item.type === 'file' && 
                  (item.name.endsWith('.csv') || item.name.endsWith('.txt') || item.name.endsWith('.json'))
                );
              }
            } catch (error) {
              // Data folder doesn't exist
            }
            
            if (dataFiles.length < 2) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: '🚫 Milestone 9 not complete. Create a "data" folder and upload at least 2 data files from the Shiny app. Then run `/done 9` again.'
              });
              return;
            }
            
            // ✅ Milestone 9 successful - now automatically trigger Milestone 10
            
            const preregistrationUrl = context.payload.issue.html_url;
            
            // Create three collaboration issues in the fork
            const issue1 = await github.rest.issues.create({
              owner, repo,
              title: 'Decide on meta-comment',
              body: [
                '## Decide on meta-comment',
                '',
                'The quote in the study overview is kind of funny, but should we really keep it?',
                '- [ ] Make a decision to keep or remove it',
                '- [ ] Justify your decision',
              ].join('\n')
            });
            
            const issue2 = await github.rest.issues.create({
              owner, repo,
              title: 'Update number of participants',
              body: [
                '## Update number of participants',
                '',
                'The preregistration currently says we\’ll collect data from five participants. But that number is clearly outdated — look how many we are!',
                '- [ ] Count the number of participants in the room',
                '- [ ] Update the number in the preregistration',
              ].join('\n')
            });
            
            const issue3 = await github.rest.issues.create({
              owner, repo,
              title: 'Correct materials\' description',
              body: [
                '## Correct materials\' description',
                '',
                'Some things have changed since the original study or the original study did not entail sufficient information for an exact replication.',
                'These things need to be incorporated:',
                '- We are using a different data collection tool',
                '- We randomly generated the size of the comparison squares from a uniform distribution',
              ].join('\n')
            });

            const issue4 = await github.rest.issues.create({
              owner, repo,
              title: 'Clarify procedure',
              body: [
                '## Clarify procedure',
                '',
                'The procedure description also needs a refresh:', 
                '- We didn\'t use a tachistoscope',
                '- We didn\'t categorize stimuli into three difficulty levels', 
                '- None of us will ever complete 6,850 (!!) trials', 
              ].join('\n')
            });

            const issue5 = await github.rest.issues.create({
              owner, repo,
              title: 'Improve data analysis plan',
              body: [
                '## Improve data analysis plan',
                '',
                'So far, the preregistration says we\'ll plot the results for each participant and visually inspect the data.', 
                'That’s... certainly *one* way to approach it, but does anyone have a better idea?'
              ].join('\n')
            });
            
            // Update main issue - mark both 9 and 10 complete
            const updatedBody = context.payload.issue.body
              .replace(/^(\s*-\s*\[)\s\](\s*9\..*)$/m, '$1x]$2')
              + '\n- [x] 10. Collaborate on issues';
            
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: updatedBody,
              state: 'open'
            });
            
            // Combined success comment for both milestones
            const completionBodyLines = [
              '**Great job on completing milestone 9** 🎉',
              '',
              'You\'ve now reached the final task of the workshop: collaboratively revising your preregistration. This is where you bring together everything you\'ve learned.', 
              'To help you get started, we\'ve created a set of issues that outline specific improvements to make. Use these issues to assign tasks and coordinate your work.', 
              '', 
              '👥 **How to collaborate**', 
              'You already explored different collaboration setups in milestone 9. For this task:', 
              '* If you\'re both working in the same repository, each of you should work in a separate branch within that repository.', 
              '* If you\'re working in separate forks, the less experienced partner (who owns the main project repository) should also create a new branch in their fork. This allows them to open a PR to suggest changes to the main branch of their own project.',
              'Once you\'ve completed a meaningful chunk of work (e.g., one or more related tasks), open a pull request (PR) so your partner can review it.', 
              '',
              '💡 **Tips for smooth collaboration**', 
              '* Write **clear commit messages** so your partner knows what changed (e.g., "Refined research question wording").', 
              '* Keep your branch or fork up-to-date with the main branch before opening a PR.', 
              '  - [How to sync your fork](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/working-with-forks/syncing-a-fork?utm_source=chatgpt.com)', 
              '  - [How to sync your branch](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/keeping-your-pull-request-in-sync-with-the-base-branch)', 
              '* **Smaller PRs** (e.g., with fewer commits) are easier to review, discuss and merge.', 
              '* **Mention your partner** in the PR (@username) or by assigning them as a reviewer.', 
              '',
              '⚔️ **What if there\'s a merge conflict?**', 
              'Merge conflicts happen when both of you change the same part of a file and GitHub doesn’t know which version to keep.', 
              'To prevent merge conflicts:', 
              '* Sync your fork or branch before making changes.', 
              '* Communicate about who is editing what.', 
              'If a conflict does happen, GitHub will show you what needs to be resolved, and you\'ll need to choose which parts to keep.', 
              '[About merge conflicts](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/addressing-merge-conflicts/about-merge-conflicts)', 
              '', 
              '**Task**: Revise the preregistration together', 
              '* Use issues to **assign tasks**.', 
              `1. [Decide on meta-comment](${issue1.data.html_url})`,
              `2. [Update number of participants](${issue2.data.html_url})`,
              `3. [Correct materials\' description](${issue3.data.html_url})`,
              `4. [Clarify procedure](${issue4.data.html_url})`,
              `5. [Improve data analysis plan](${issue5.data.html_url})`,
              '* Work individually in your **own branch or fork**.', 
              '* **Create PRs** when you\'re ready for feedback.', 
              '* Use PRs to **discuss and improve** the changes.', 
              '* **Close issues** once tasks are complete.', 
              '', 
              '**Afterwards**: This is the final task of the workshop, so there are no more `/done` commands needed.', 
              '',
            ];
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: completionBodyLines.join('\n')
            });

      # Create data generation issue immediately after milestone 8
      - name: Create data generation issue after milestone 8
        if: steps.parse.outputs.result == '8'
        uses: actions/github-script@v7
        env:
          FORK_REPO: ${{ steps.vars.outputs.fork_repo }}
        with:
          github-token: ${{ secrets.GH_PAT_CROSSREPO }}
          script: |
            const [owner, repo] = process.env.FORK_REPO.split('/');
            const preregistrationUrl = context.payload.issue.html_url;
            
            const dataGenIssue = await github.rest.issues.create({
              owner, repo,
              title: 'Generate and add research data',
              body: [
                '## 👥 Partner Task: Generate and add data',
                '',
                '### Step 1: Generate Data',
                `Visit the [🔬 experiment 👀](https://${context.repo.owner}.github.io/${context.repo.repo}/steven) and each generate your own data (recommended: 20 trials)`,
                '',
                '### Step 2: Upload to GitHub',
                'Next, both of you should upload your generated data to the less experienced partner\'s fork.', 
                '', 
                'You have two options on how to do this:', 
                '* **Option (a)**: The less experienced partner adds the more experienced partner as a **collaborator** to their fork.', 
                '* **Option (b)**: The more experienced partner uploads their data file in their own fork and then requests to add it to their partner\'s fork via a **pull request**.', 
                '', 
                'Whether you choose option (a) or (b) depends on trust in collaborative projects:', 
                '* If you add someone as a collaborator, you give them permission to make changes directly to your project, even without your explicit agreement.', 
                '* If you work via forks and pull requests, you retain full control, meaning your collaborators cannot make any changes without your review and approval.', 
                '', 
                'When uploading your data folder, note that GitHub itself doesn\'t let you create an empty folder. However, if your folder contains files, you can upload it directly using drag & drop:', 
                '* Create a folder named **data** on your local computer.', 
                '* Place your generated data file inside this folder.', 
                '* Navigate to your fork on GitHub.', 
                '* Click the **Upload files** button (accessible via the **"+"** button next to the **Code** button).', 
                '* Drag your **data folder** (with files inside) into the upload area.', 
                '* Commit the folder with a descriptive message.',
                '', 
                '### Step 3: Mark Complete',
                `**Afterwards**: Return to: ${preregistrationUrl} and comment \`/done 9\``,
                '',
                '---',
                '',
                '📋 **Alternative upload methods & help:** [GitHub Upload Cheat Sheet](https://docs.github.com/en/repositories/working-with-files/managing-files/adding-a-file-to-a-repository)',
                '',
              ].join('\n')
            });
            
            // Also comment in the main issue with the link
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `📋 I've created a detailed guide for generating and uploading data in your fork: ${dataGenIssue.data.html_url}\n\nPlease read it carefully with your partner before proceeding.`
            });
