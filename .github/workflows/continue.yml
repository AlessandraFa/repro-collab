# .github/workflows/milestone-router.yml
name: Milestone Router

concurrency:
  group: "milestones-${{ github.event.issue.number  }}"
  cancel-in-progress: false

on:
  issue_comment:
    types: [created]

jobs:
  route:
    if: ${{ startsWith(github.event.comment.body, '/done ') && contains(github.event.issue.labels.*.name, 'newfork') }}
    runs-on: ubuntu-latest
    steps:
      # 0) Extract FORK_REPO from issue body
      - name: Extract FORK from issue body
        id: vars
        env:
          ISSUE_BODY: ${{ github.event.issue.body }}
        run: |
          FORK_REPO="$(echo "$ISSUE_BODY" \
            | grep -oP 'Fork repo: `\K[^`]+')"
          echo "Extracted fork repo: $FORK_REPO"
          echo "fork_repo=$FORK_REPO" >> "$GITHUB_OUTPUT"

      # 1) Parse the `/done N` command
      - name: Parse slash-command
        id: parse
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            // 1) Grab body and regex all numbered tasks
            const body = context.payload.issue.body;
            const taskRe = /^\s*-\s*\[[ x]\]\s*(\d+)\./gm;
            let m, nums = [];
            while ((m = taskRe.exec(body)) !== null) {
              nums.push(parseInt(m[1], 10));
            }
            if (nums.length === 0) return '-1';
            
            // 2) Determine max number from the list
            const max = Math.max(...nums);

            // 3) Parse the /done M command
            const cmd = context.payload.comment.body.trim();
            const cm = /^\/done\s+(\d+)/.exec(cmd);
            if (!cm) return '-1';
            const num = parseInt(cm[1], 10);

            // 4) Validate range
            if (num < 1 || num > max) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo:  context.repo.repo,
                issue_number: context.issue.number,
                body: `🚫 Invalid milestone number. Please pick a number between 1 and ${max}.`
              });
              return '-1';
            }

            // 5) OK—return it
            return String(num);
      - name: Verify milestone 3
        if: steps.parse.outputs.result == '3'
        uses: actions/github-script@v7
        env:
          FORK_REPO: ${{ steps.vars.outputs.fork_repo }}
        with:
          github-token: ${{ secrets.GH_PAT_CROSSREPO }}
          script: |
            const [owner, repo] = process.env.FORK_REPO.split('/');
            const { data } = await github.rest.repos.get({ owner, repo });

            if (!data.has_issues) {
              // failure feedback only
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: '🚫 Milestone 3 not complete. Please enable Issues on your fork, then `/done 3` again.'
              });
            } else {
              // 1) Cross off milestone 3 in the upstream issue body
              let updatedBody = context.payload.issue.body
                .replace(/^(\s*-\s*\[)\s\](\s*3\..*)$/m, '$1x]$2')
                .replace(/\n*<img[^>]*>.*$/m, '\n- [ ] 4. Create an issue');

                //.replace(/\n*<img[^>]*>.*$/m, `\n- [ ] 4. Create an issue\n\n<img src="https://${context.repo.owner}.github.io/${context.repo.repo}/assets/create_issue.gif" alt="Create Issue GIF">`);
              
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo:  context.repo.repo,
                issue_number: context.issue.number,
                body: updatedBody
              });
              
              // 3) Create a new issue in the fork for them to "create your own first issue"
              const preregistrationUrl = context.payload.issue.html_url;
              const issueBodyLines = [
                '*Great work on enabling issues! Now create your first one.*',
                'In collaborative writing projects on GitHub, issues are the central way to coordinate work and communicate with your collaborators.', 
                'For example, you might want to create an issue to remind yourself (and your collaborators) that your project does not yet have a preregistration.',
                '', 
                '**Task:** Let's practice creating a new issue in your repository!',
                '- Go to the *Issues* tab.', 
                '- Click *New Issue*.', 
                '- Use this exact title: *Preregistration needed*.', 
                'Add a brief introduction about yourself, what brings you to this workshop and what you\'re hoping to learn.',
                '', 
                `**Afterwards:** Return to this issue and comment \`/done 4\` here: ${preregistrationUrl}`,
                '',
                `<img src="https://${context.repo.owner}.github.io/${context.repo.repo}/assets/create_issue.gif" alt="Make Issues GIF">`,
              ];

              const newIssue = await github.rest.issues.create({
                owner: owner,
                repo:  repo,
                title: 'Create your own first issue',
                body: issueBodyLines.join('\n')
              });

              // 4) Celebrate in the upstream issue with link to new issue
              const milestone3BodyLines = [
                '🎉 Milestone 3 complete - "Activate issues"!',
                '',
                `**Task:** Milestone 4 is now available, and an issue is waiting in your fork, look into it: ${newIssue.data.html_url}`,
                '',
                `**Afterwards:** Comment \`/done 4\` here.`,
                ];
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo:  context.repo.repo,
                issue_number: context.issue.number,
                body: milestone3BodyLines.join('\n')
              });
            }
      - name: Verify milestone 4
        if: steps.parse.outputs.result == '4'
        uses: actions/github-script@v7
        env:
          FORK_REPO: ${{ steps.vars.outputs.fork_repo }}
        with:
          github-token: ${{ secrets.GH_PAT_CROSSREPO }}
          script: |
            const [owner, repo] = process.env.FORK_REPO.split('/');
            const target = 'preregistration needed';

            // 1) Grab the last 10 issues (all states)
            const { data: recent } = await github.rest.issues.listForRepo({
              owner, repo,
              state: 'all',
              per_page: 10,
              sort: 'created',
              direction: 'desc'
            });

            // 2) Try exact match
            let found = recent.find(i => i.title.toLowerCase() === target);

            // 3) If no exact, run Levenshtein ≤3
            if (!found) {
              const lev = (a, b) => {
                const dp = Array.from({ length: a.length + 1 }, () => []);
                for (let i = 0; i <= a.length; i++) dp[i][0] = i;
                for (let j = 0; j <= b.length; j++) dp[0][j] = j;
                for (let i = 1; i <= a.length; i++) {
                  for (let j = 1; j <= b.length; j++) {
                    dp[i][j] = a[i-1] === b[j-1]
                      ? dp[i-1][j-1]
                      : 1 + Math.min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]);
                  }
                }
                return dp[a.length][b.length];
              };
              found = recent.find(i => lev(i.title.toLowerCase(), target) <= 3);
            }

            // 4) If still not found → error
            if (!found) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo:  context.repo.repo,
                issue_number: context.issue.number,
                body: `🚫 Milestone 4 not complete. Please open an issue called “Preregistration needed” in your fork and then run \`/done 4\` again.`
              });
              return;
            }

            // 5) Cross off “4.”, reveal “5.”
            const updated = context.payload.issue.body
              .replace(/^(\s*-\s*\[)\s\](\s*4\..*)$/m, '$1x]$2')
              + '\n- [ ] 5. Close an issue';
              
              //.replace(/\n*<img[^>]*>.*$/m, `\n- [ ] 5. Close an issue\n\n<img src="https://${context.repo.owner}.github.io/${context.repo.repo}/assets/close_issue.gif" alt="Close Issue GIF">`);

            await github.rest.issues.update({
              owner: context.repo.owner,
              repo:  context.repo.repo,
              issue_number: context.issue.number,
              body: updated
            });

            // 6) Celebrate
            const forkIssues = await github.rest.issues.listForRepo({
              owner, repo,
              state: 'open',
              per_page: 10
            });
            const firstIssue = forkIssues.data.find(i =>
              i.title.toLowerCase() === 'create your own first issue'
            );
            const firstIssueUrl = firstIssue.html_url;
            const milestone4BodyLines = [
              '🎉 Milestone 4 complete - "Open a issue"!',
              '',
              `**Task:** Milestone 5 is now available, go back to your first Issue read the new comment: ${firstIssueUrl}`,
              '',
              `**Afterwards:** Comment \`/done 5\` here.`,
            ];
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo:  context.repo.repo,
              issue_number: context.issue.number,
              body: milestone4BodyLines.join('\n')
            });

            // 7) Notify the "Create your own first issue" in the fork
            const preregistrationUrl = context.payload.issue.html_url;
            if (firstIssue) {
              await github.rest.issues.createComment({
                owner, repo,
                issue_number: firstIssue.number,
                body: `@${context.actor}, you’ve completed step 4, now close this issue and comment \`/done 5\` here: ${preregistrationUrl}!`
              });
            }
    # 5.1) Verify "Create your own first issue" is closed in the fork
      - name: Verify milestone 5
        id: verify-5
        if: steps.parse.outputs.result == '5'
        uses: actions/github-script@v7
        env:
          FORK_REPO: ${{ steps.vars.outputs.fork_repo }}
        with:
          github-token: ${{ secrets.GH_PAT_CROSSREPO }}
          script: |
            const [forkOwner, forkRepo] = process.env.FORK_REPO.split('/');

            // 1) First verify the "Create your own first issue" is closed
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: forkOwner, repo: forkRepo, state: 'all', per_page: 100
            });
            const intro = issues.find(i =>
              i.title.toLowerCase() === 'create your own first issue'
            );

            if (!intro || intro.state !== 'closed') {
              const url = intro
                ? intro.html_url
                : `https://github.com/${forkOwner}/${forkRepo}/issues`;
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `🚫 Milestone 5 not complete. Please close ["Create your own first issue"](${url}) in your fork, then run \`/done 5\` again.`
              });
              return; // Exit early
            }

            // 2) Extract the fork SHA from the issue body
            const issueBody = context.payload.issue.body;
            const shaMatch = issueBody.match(/Fork sha:\s*`([a-f0-9]{40})`/);
            if (!shaMatch) {
              throw new Error('Could not find fork SHA in issue body');
            }
            const forkSha = shaMatch[1];

            // 3) Store branch name for next step
            const timestamp = Date.now();
            const branchName = `preregistration/pr-${context.actor}-${timestamp}`;
            core.setOutput('branch_name', branchName);
            core.setOutput('fork_sha', forkSha);
            core.setOutput('fork_owner', forkOwner);
            core.setOutput('fork_repo', forkRepo);

      - name: Create branch and commit with upstream permissions
        id: create-branch
        if: steps.parse.outputs.result == '5' && steps.verify-5.outputs.branch_name
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_PAT_UPSTREAM }}
          script: |
            const branchName = '${{ steps.verify-5.outputs.branch_name }}';
            const forkSha = '${{ steps.verify-5.outputs.fork_sha }}';
            const { data: mainRef } = await github.rest.git.getRef({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    ref: 'heads/main'
                  });
            const mainSha = mainRef.object.sha;

            // Create branch in upstream from fork SHA
            await github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `refs/heads/${branchName}`,
              sha: mainSha
            });

            // Fixed preregistration content
            const preregistrationLines = [
              '# Preregistration',
              '',
              '## Study Overview',
              'This study aims to replicate Stevens\' Power Law for size perception.',
              '',
              '## Hypotheses',
              'We hypothesize that perceived size will follow a power function with an exponent different from 1.',
              '',
              '## Methods',
              'Participants will compare squares of different sizes and judge which is larger.',
              '',
              '## Analysis Plan',
              'We will fit a power function to the data and examine the exponent.',
              '',
              '## Sample Size',
              'We aim to collect data from all workshop participants.',
              '',
              '---',
              `Last updated: ${new Date().toISOString()}`
            ];
            const preregistrationContent = preregistrationLines.join('\n');
            
            
            // Get current file SHA if it exists
            let fileSha = null;
            try {
              const { data: file } = await github.rest.repos.getContent({
                owner: context.repo.owner,
                repo: context.repo.repo,
                path: 'preregistration.md',
                ref: branchName
              });
              fileSha = file.sha;
            } catch (e) {
              // File doesn't exist, which is fine
            }
            
            // Overwrite the file
            await github.rest.repos.createOrUpdateFileContents({
              owner: context.repo.owner,
              repo: context.repo.repo,
              path: 'preregistration.md',
              message: `Update preregistration for ${context.actor}`,
              content: Buffer.from(preregistrationContent).toString('base64'),
              branch: branchName,
              sha: fileSha
            });
              core.setOutput('branch_name', branchName);

      - name: Create PR and update issue
        if: steps.parse.outputs.result == '5' && steps.create-branch.outputs.branch_name
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_PAT_CROSSREPO }}
          script: |
            const branchName = '${{ steps.verify-5.outputs.branch_name }}';
            const forkOwner = '${{ steps.verify-5.outputs.fork_owner }}';
            const forkRepo = '${{ steps.verify-5.outputs.fork_repo }}';

            // Get fork's default branch
            const { data: forkData } = await github.rest.repos.get({
              owner: forkOwner,
              repo: forkRepo
            });
            const forkDefaultBranch = forkData.default_branch;

            const prBodyLines = [
              '## :eyes: Review Instructions',
              '',
              '**Task:**',
              'Go to the "Files changed" tab of this PR and add a suggestion for improvement.',
              '- Modify content in Hypotheses to an exponent of 2.',
              '',
              '> *Hint: To add a suggestion, click the "+" symbol next to a line, type your improved text in a suggestion block, and submit the comment.*',
              '',
              `After adding your suggestion, return to ${context.payload.issue.html_url} and comment \`/done 6\` to continue.`,
              '',
              '<img src="https://raw.githubusercontent.com/HannesDiemerling/repro-collab/main/gifs/make_suggestion.gif" alt="Make Suggestion GIF">'
            ];

            // Create PR from upstream branch to fork
            const { data: pr } = await github.rest.pulls.create({
              owner: forkOwner,
              repo: forkRepo,
              title: 'Review this preregistration update',
              head: `${context.repo.owner}:${branchName}`,
              base: forkDefaultBranch,
              body: prBodyLines.join('\n'),
              maintainer_can_modify: true
            });
              
            // Update the upstream issue checklist
            const updatedBody5 = context.payload.issue.body
                .replace(/^(\s*-\s*\[)\s\](\s*5\..*)$/m, '$1x]$2')
                + '\n- [ ] 6. Add a suggestion to the PR';

                //.replace(/\n*<img[^>]*>.*$/m, `\n- [ ] 6. Review and merge a PR\n\n<img src="https://${context.repo.owner}.github.io/${context.repo.repo}/assets/review_pr.gif" alt="Review PR GIF">`);
              
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: updatedBody5
            });

            // Comment on the upstream issue
            const milestone5BodyLines = [
              '🎉 Milestone 5 complete - "Close an issue"!',
              '',
              `**Task:** Milestone 6 is now available. Review the pull request (PR) I created in your fork: ${pr.html_url}`,
              '',
              'Add a suggestion to improve the code using GitHub\'s suggestion feature, more detail in our PR.',
              '',
              `**Afterwards:** Comment \`/done 6\` here.`,
            ];
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: milestone5BodyLines.join('\n')
            });
            

      - name: Add a PR Suggestion
        if: steps.parse.outputs.result == '6'
        uses: actions/github-script@v7
        env:
          FORK_REPO: ${{ steps.vars.outputs.fork_repo }}
        with:
          github-token: ${{ secrets.GH_PAT_CROSSREPO }}
          script: |
            const [owner, repo] = process.env.FORK_REPO.split('/');
            
            // Find the PR we created
            const { data: prs } = await github.rest.pulls.list({
              owner, repo,
              state: 'all',
              per_page: 20,
              sort: 'created',
              direction: 'desc'
            });
            
            const pr = prs.find(pr =>
              pr.title === 'Review this preregistration update'
            );
            
            if (!pr) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: '🚫 Could not find the PR. Please check your fork for the preregistration PR.'
              });
              return;
            }
            
            // Check for review comments with suggestions
            const { data: reviews } = await github.rest.pulls.listReviews({
              owner, repo,
              pull_number: pr.number
            });
            
            let hasSuggestion = false;
            for (const review of reviews) {
              const { data: comments } = await github.rest.pulls.listCommentsForReview({
                owner, repo,
                pull_number: pr.number,
                review_id: review.id
              });
              
              if (comments.some(c => c.body.includes('```suggestion'))) {
                hasSuggestion = true;
                break;
              }
            }
            
            // Also check single comments
            if (!hasSuggestion) {
              const { data: prComments } = await github.rest.pulls.listReviewComments({
                owner, repo,
                pull_number: pr.number
              });
              
              hasSuggestion = prComments.some(c => c.body.includes('```suggestion'));
            }
            
            if (!hasSuggestion) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `🚫 Milestone 6 not complete. Please add a suggestion to the PR using GitHub's suggestion feature. Go to the "Files changed" tab in your PR: ${pr.html_url}, click on a line and add a suggestion, then run \`/done 6\` again.`
              });
              return;
            }
            
            // Update issue body
            const updatedBody = context.payload.issue.body
              .replace(/^(\s*-\s*\[)\s\](\s*6\..*)$/m, '$1x]$2')
              + '\n- [ ] 7. Merge the pull request';
            
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: updatedBody
            });
            
            // Success comment
            const milestone6BodyLines = [
              '🎉 Milestone 6 complete - "Add a PR suggestion"!',
              '',
              `**Task:** Milestone 7 is now available. Time to merge your pull request: ${pr.html_url}`,
              '',
              'Click the "Merge pull request" button to complete the PR workflow.',
              '',
              `**Afterwards**: comment \`/done 7\` here.`
            ];
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: milestone6BodyLines.join('\n')
            });
 
      - name: Merge PR
        if: steps.parse.outputs.result == '7'
        uses: actions/github-script@v7
        env:
          FORK_REPO: ${{ steps.vars.outputs.fork_repo }}
        with:
          github-token: ${{ secrets.GH_PAT_CROSSREPO }}
          script: |
            const [owner, repo] = process.env.FORK_REPO.split('/');
            
            // Find the PR we created
            const { data: prs } = await github.rest.pulls.list({
              owner, repo,
              state: 'all',
              per_page: 20,
              sort: 'created',
              direction: 'desc'
            });
            
            const ourPr = prs.find(pr =>
              pr.title === 'Review this preregistration update'
            );
            
            if (!ourPr) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: '🚫 Could not find the PR. Please check your fork for the preregistration PR.'
              });
              return;
            }
            
            //Hotfix, check if closed for robustness
            if (ourPr.state !== 'closed') {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `🚫 Milestone 7 not complete. Please merge or close the pull request: ${ourPr.html_url}. Make sure all checks have passed, then click "Merge pull request" and run \`/done 7\` again.`
              });
              return;
            }
            
            // Update issue body - mark 7 as complete
            const updatedBody = context.payload.issue.body
              .replace(/^(\s*-\s*\[)\s\](\s*7\..*)$/m, '$1x]$2');
            
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: updatedBody
            });
            
            // Final success comment
            const workshopCompleteLines = [
              `🎉 **Congratulations @${context.actor}!** 🎉`,
              '',
              'You completed all key steps of Part one of this Workshop!',
              '',
              'You\'ve mastered:',
              '- ✅ Forking repositories',
              '- ✅ Handling issues',
              '- ✅ Reviewing & merging PRs',
              '',
              '---',
              '',
              '**Task**: Stand up and move to the marked corner.',
              '',
              '➡️ Form a line along the tape.',
              '➡️ Talk to your neighbors.',
              '➡️ Ask how much GitHub experience they have.',
              '➡️ Line up: **left = least**, **right = most**.',
              '➡️ Adjust until the full line is correct.',
              '➡️ Ask instructors if unsure.',
            ];

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: workshopCompleteLines.join('\n')
            });
