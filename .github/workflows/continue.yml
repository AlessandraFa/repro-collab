# .github/workflows/milestone-router.yml
name: Milestone Router

concurrency:
  group: "milestones-${{ github.event.issue.number  }}"
  cancel-in-progress: false

on:
  issue_comment:
    types: [created]

jobs:
  route:
    if: ${{ startsWith(github.event.comment.body, '/done ') && contains(github.event.issue.labels.*.name, 'newfork') }}
    runs-on: ubuntu-latest
    steps:
      # 0) Extract FORK_REPO from issue body
      - name: Extract FORK from issue body
        id: vars
        env:
          ISSUE_BODY: ${{ github.event.issue.body }}
        run: |
          FORK_REPO="$(echo "$ISSUE_BODY" \
            | grep -oP 'Fork repo: `\K[^`]+')"
          echo "fork_repo=$FORK_REPO" >> "$GITHUB_OUTPUT"

      # 1) Parse the `/done N` command
      - name: Parse slash-command
        id: parse
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            // 1) Grab body and regex all numbered tasks
            const body = context.payload.issue.body;
            const taskRe = /^\s*-\s*\[[ x]\]\s*(\d+)\./gm;
            let m, nums = [];
            while ((m = taskRe.exec(body)) !== null) {
              nums.push(parseInt(m[1], 10));
            }
            if (nums.length === 0) return '-1';
            
            // 2) Determine max number from the list
            const max = Math.max(...nums);

            // 3) Parse the /done M command
            const cmd = context.payload.comment.body.trim();
            const cm = /^\/done\s+(\d+)/.exec(cmd);
            if (!cm) return '-1';
            const num = parseInt(cm[1], 10);

            // 4) Validate range
            if (num < 1 || num > max) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo:  context.repo.repo,
                issue_number: context.issue.number,
                body: `üö´ Invalid milestone number. Please pick a number between 1 and ${max}.`
              });
              return '-1';
            }

            // 5) OK‚Äîreturn it
            return String(num);
      - name: Verify milestone 3
        if: steps.parse.outputs.result == '3'
        uses: actions/github-script@v7
        env:
          FORK_REPO: ${{ steps.vars.outputs.fork_repo }}
        with:
          github-token: ${{ secrets.GH_PAT_CROSSREPO }}
          script: |
            const [owner, repo] = process.env.FORK_REPO.split('/');
            const { data } = await github.rest.repos.get({ owner, repo });

            if (!data.has_issues) {
              // failure feedback only
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: 'üö´ Milestone 3 not complete. Please enable Issues on your fork, then `/done 3` again.'
              });
            } else {
              // 1) Cross off milestone 3 in the upstream issue body
              let updatedBody = context.payload.issue.body.replace(
                // match only the checkbox for "3."
                /^(\s*-\s*\[)\s\](\s*3\..*)$/m,
                '$1x]$2'
              );
              
              // 2) Reveal milestone 4 in that same list
              updatedBody += '\n- [ ] 4. Create an issue';

              await github.rest.issues.update({
                owner: context.repo.owner,
                repo:  context.repo.repo,
                issue_number: context.issue.number,
                body: updatedBody
              });
              
              // 3) Create a new issue in the fork for them to "create your own first issue"
              const onboardingUrl = context.payload.issue.html_url;
              const newIssue = await github.rest.issues.create({
                owner: owner,
                repo:  repo,
                title: 'Create your first issue',
                body: `Great work on enabling issues! Now create your first one.

                      **Task:** Create a new issue in this repository titled "introduction needed"
                      
                      ---
                      
                      This helps you practice the basics of issue creation. 
                      Go to the Issues tab, click "New Issue", and use that exact title. 
                      
                      Feel free to add a brief introduction about yourself, what brings you to this workshop and what you're hoping to learn?
                      
                      Related: ${onboardingUrl}`
              });

              // 4) Celebrate in the upstream issue with link to new issue
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo:  context.repo.repo,
                issue_number: context.issue.number,
                body: `üéâ Milestone 3 complete‚Äî"Activate issues"! Milestone 4 is now available, and your first-issue template is waiting in your fork: ${newIssue.data.html_url}`
              });
            }
      - name: Verify milestone 4
        if: steps.parse.outputs.result == '4'
        uses: actions/github-script@v7
        env:
          FORK_REPO: ${{ steps.vars.outputs.fork_repo }}
        with:
          github-token: ${{ secrets.GH_PAT_CROSSREPO }}
          script: |
            const [owner, repo] = process.env.FORK_REPO.split('/');
            const target = 'introduction needed';

            // 1) Grab the last 10 issues (all states)
            const { data: recent } = await github.rest.issues.listForRepo({
              owner, repo,
              state: 'all',
              per_page: 10,
              sort: 'created',
              direction: 'desc'
            });

            // 2) Try exact match
            let found = recent.find(i => i.title.toLowerCase() === target);

            // 3) If no exact, run Levenshtein ‚â§3
            if (!found) {
              const lev = (a, b) => {
                const dp = Array.from({ length: a.length + 1 }, () => []);
                for (let i = 0; i <= a.length; i++) dp[i][0] = i;
                for (let j = 0; j <= b.length; j++) dp[0][j] = j;
                for (let i = 1; i <= a.length; i++) {
                  for (let j = 1; j <= b.length; j++) {
                    dp[i][j] = a[i-1] === b[j-1]
                      ? dp[i-1][j-1]
                      : 1 + Math.min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]);
                  }
                }
                return dp[a.length][b.length];
              };
              found = recent.find(i => lev(i.title.toLowerCase(), target) <= 3);
            }

            // 4) If still not found ‚Üí error
            if (!found) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo:  context.repo.repo,
                issue_number: context.issue.number,
                body: `üö´ Milestone 4 not complete. Please open an issue called ‚ÄúIntroduction needed‚Äù in your fork and then run \`/done 4\` again.`
              });
              return;
            }

            // 5) Cross off ‚Äú4.‚Äù, reveal ‚Äú5.‚Äù
            const updated = context.payload.issue.body
              .replace(
                /^(\s*-\s*\[)\s\](\s*4\..*)$/m,
                '$1x]$2'
              ) + '\n- [ ] 5. Close an issue';

            await github.rest.issues.update({
              owner: context.repo.owner,
              repo:  context.repo.repo,
              issue_number: context.issue.number,
              body: updated
            });

            // 6) Celebrate
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo:  context.repo.repo,
              issue_number: context.issue.number,
              body: 'üéâ Milestone 4 complete! Next up: milestone 5.'
            });

            // 7) Notify the "Create your own first issue" in the fork
            const forkIssues = await github.rest.issues.listForRepo({
              owner, repo,
              state: 'open',
              per_page: 10
            });
            const firstIssue = forkIssues.data.find(i =>
              i.title.toLowerCase() === 'create your own first issue'
            );
            if (firstIssue) {
              await github.rest.issues.createComment({
                owner, repo,
                issue_number: firstIssue.number,
                body: `@${context.actor}, you‚Äôve completed step 4‚Äîfeel free to close this issue now.`
              });
            }
    # 5.1) Verify ‚ÄúCreate your own first issue‚Äù is closed in the fork
      - name: Verify milestone 5
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_PAT_CROSSREPO }}
          script: |
            const [forkOwner, forkRepo] = process.env.FORK_REPO.split('/');
            // list last 100 issues in the fork
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: forkOwner, repo: forkRepo, state: 'all', per_page: 100
            });
            const intro = issues.find(i =>
              i.title.toLowerCase() === 'create your own first issue'
            );
            if (!intro || intro.state !== 'closed') {
              const url = intro
                ? intro.html_url
                : `https://github.com/${forkOwner}/${forkRepo}/issues`;
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo:  context.repo.repo,
                issue_number: context.issue.number,
                body: `üö´ Milestone 5 not complete. Please close [‚ÄúCreate your own first issue‚Äù](${url}) in your fork, then run \`/done 5\` again.`
              });
              core.setOutput('abort', 'true');
            } else {
              core.setOutput('abort', 'false');
            }

    # 5.2) Cross off ‚Äú5.‚Äù & reveal ‚Äú6.‚Äù in the upstream issue
      - name: Update upstream checklist
        if: steps.parse.outputs.result == '5' && steps[0].outputs.abort == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            const updated = context.payload.issue.body
              .replace(/^(\s*-\s*\[)\s\](\s*5\..*)$/m, '$1x]$2')
              + '\n- [ ] 6. Review a PR';
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo:  context.repo.repo,
              issue_number: context.issue.number,
              body: updated
            });

    # 5.3) Compute the exact merge‚Äêbase SHA (upstream‚Üîfork)
      - name: Compute merge-base
        id: merge
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_PAT_CROSSREPO }}
          result-encoding: string
          script: |
            const [forkOwner, forkRepo] = process.env.FORK_REPO.split('/');
            const upDef = (await github.rest.repos.get({
              owner: context.repo.owner, repo: context.repo.repo
            })).data.default_branch;
            const fkDef = (await github.rest.repos.get({
              owner: forkOwner, repo: forkRepo
            })).data.default_branch;
            const comp = await github.rest.repos.compareCommits({
              owner: context.repo.owner,
              repo:  context.repo.repo,
              base:  upDef,
              head:  `${forkOwner}:${fkDef}`
            });
            return comp.data.merge_base_commit.sha;

    # 5.4) Create a new branch in upstream at that SHA
      - name: Create upstream branch
        if: steps.parse.outputs.result == '5' && steps.merge.outputs.result != ''
        uses: actions/github-script@v7
        with:
          script: |
            const sha = '${{ steps.merge.outputs.result }}';
            const branch = `onboarding/prereg-${Date.now()}`;
            await github.rest.git.createRef({
              owner: context.repo.owner,
              repo:  context.repo.repo,
              ref:   `refs/heads/${branch}`,
              sha
            });
            core.setOutput('branch', branch);

    # 5.5) Commit the preregistration line on that upstream branch
      - name: Commit preregistration.md
        if: steps.parse.outputs.result == '5' && steps.merge.outputs.result != ''
        uses: actions/github-script@v7
        with:
          script: |
            const branch = '${{ steps.create-file.outputs.branch }}';
            let sha = null, content = '';
            try {
              const f = await github.rest.repos.getContent({
                owner: context.repo.owner,
                repo:  context.repo.repo,
                path:  'preregistration.md',
                ref:   branch
              });
              sha = f.data.sha;
              content = Buffer.from(f.data.content, 'base64').toString();
            } catch {}
            const updated = content + `\nOnboarding preregistration completed by @${context.actor}\n`;
            const encoded = Buffer.from(updated).toString('base64');
            await github.rest.repos.createOrUpdateFileContents({
              owner: context.repo.owner,
              repo:  context.repo.repo,
              path:  'preregistration.md',
              message: 'Add preregistration onboarding line',
              content: encoded,
              branch,
              sha
            });

    # 5.6) Open the PR in the fork, sourcing from that upstream branch
      - name: Open PR in fork
        if: steps.parse.outputs.result == '5' && steps.merge.outputs.result != ''
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_PAT_CROSSREPO }}
          script: |
            const [forkOwner, forkRepo] = process.env.FORK_REPO.split('/');
            const branch = '${{ steps.create-file.outputs.branch }}';
            const forkDef = (await github.rest.repos.get({
              owner: forkOwner, repo: forkRepo
            })).data.default_branch;
            await github.rest.pulls.create({
              owner: forkOwner,
              repo:  forkRepo,
              title: 'Review this documentation update',
              head:  `${context.repo.owner}:${branch}`,
              base:  forkDef,
              maintainer_can_modify: true,
              body: `Time to practice code review! Please review this small change.

              **Task:** Review this documentation update and approve or request changes.
              
              ---
              
              This PR adds a single line to preregistration.md as part of the onboarding process. 
              Take a look at the changes and decide if they look good to merge.
              
              This is your introduction to collaborative development, reviewing others' contributions is a key skill in team projects.`
            });
