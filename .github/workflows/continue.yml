# .github/workflows/milestone-router.yml
name: Milestone Router

concurrency:
  group: "milestones-${{ github.event.issue.number  }}"
  cancel-in-progress: false

on:
  issue_comment:
    types: [created]

jobs:
  route:
    if: ${{ startsWith(github.event.comment.body, '/done ') && contains(github.event.issue.labels.*.name, 'newfork') }}
    runs-on: ubuntu-latest
    steps:
      # 0) Extract FORK_REPO from issue body
      - name: Extract FORK from issue body
        id: vars
        env:
          ISSUE_BODY: ${{ github.event.issue.body }}
        run: |
          FORK_REPO="$(echo "$ISSUE_BODY" \
            | grep -oP 'Fork repo: `\K[^`]+')"
          echo "Extracted fork repo: $FORK_REPO"
          echo "fork_repo=$FORK_REPO" >> "$GITHUB_OUTPUT"

      # 1) Parse the `/done N` command
      - name: Parse slash-command
        id: parse
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_PAT_CROSSREPO }}
          result-encoding: string
          script: |
            // 1) Grab body and regex all numbered tasks
            const body = context.payload.issue.body;
            const taskRe = /^\s*-\s*\[[ x]\]\s*(\d+)\./gm;
            let m, nums = [];
            while ((m = taskRe.exec(body)) !== null) {
              nums.push(parseInt(m[1], 10));
            }
            if (nums.length === 0) return '-1';
            
            // 2) Determine max number from the list
            const max = Math.max(...nums);

            // 3) Parse the /done M command
            const cmd = context.payload.comment.body.trim();
            const cm = /^\/done\s+(\d+)/.exec(cmd);
            if (!cm) return '-1';
            const num = parseInt(cm[1], 10);

            // 4) Validate range
            if (num < 1 || num > max) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo:  context.repo.repo,
                issue_number: context.issue.number,
                body: `🚫 Invalid milestone number. Please pick a number between 1 and ${max}.`
              });
              return '-1';
            }

            // 5) OK—return it
            return String(num);
      - name: Verify milestone 3
        if: steps.parse.outputs.result == '3'
        uses: actions/github-script@v7
        env:
          FORK_REPO: ${{ steps.vars.outputs.fork_repo }}
        with:
          github-token: ${{ secrets.GH_PAT_CROSSREPO }}
          script: |
            const [owner, repo] = process.env.FORK_REPO.split('/');
            const { data } = await github.rest.repos.get({ owner, repo });

            if (!data.has_issues) {
              // failure feedback only
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: '🚫 Milestone 3 not complete. Please enable Issues on your fork, then `/done 3` again.'
              });
            } else {
              // 1) Cross off milestone 3 in the upstream issue body
              let updatedBody = context.payload.issue.body
                .replace(/^(\s*-\s*\[)\s\](\s*3\..*)$/m, '$1x]$2')
                .replace(/\n*<img[^>]*>.*$/m, '\n- [ ] 4. Create an issue');

                //.replace(/\n*<img[^>]*>.*$/m, `\n- [ ] 4. Create an issue\n\n<img src="https://${context.repo.owner}.github.io/${context.repo.repo}/assets/create_issue.gif" alt="Create Issue GIF">`);
              
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo:  context.repo.repo,
                issue_number: context.issue.number,
                body: updatedBody,
                state: 'open'
              });
              
              // 3) Create a new issue in the fork for them to "create your own first issue"
              const preregistrationUrl = context.payload.issue.html_url;
              const issueBodyLines = [
                'Great work on enabling issues! Now create your first one.',
                '',
                '**Task:** Create a new issue in this repository titled "Preregistration needed"',
                '',
                `**Afterwards:** Comment \`/done 4\` here: ${preregistrationUrl}`,
                '',
                '---',
                '',
                'This helps you practice the basics of issue creation.',
                'Go to the Issues tab, click "New Issue", and use that exact title.',
                '',
                'Feel free to add a brief introduction about yourself, what brings you to this workshop and what you\'re hoping to learn?',
                '',
                '',
                `<img src="https://${context.repo.owner}.github.io/${context.repo.repo}/assets/create_issue.gif" alt="Make Issues GIF">`,
              ];

              const newIssue = await github.rest.issues.create({
                owner: owner,
                repo:  repo,
                title: 'Create your own first issue',
                body: issueBodyLines.join('\n')
              });

              // 4) Celebrate in the upstream issue with link to new issue
              const milestone3BodyLines = [
                '🎉 Milestone 3 complete - "Activate issues"!',
                '',
                `**Task:** Milestone 4 is now available, and an issue is waiting in your fork, look into it: ${newIssue.data.html_url}`,
                '',
                `**Afterwards:** Comment \`/done 4\` here.`,
                ];
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo:  context.repo.repo,
                issue_number: context.issue.number,
                body: milestone3BodyLines.join('\n')
              });
            }
      - name: Verify milestone 4
        if: steps.parse.outputs.result == '4'
        uses: actions/github-script@v7
        env:
          FORK_REPO: ${{ steps.vars.outputs.fork_repo }}
        with:
          github-token: ${{ secrets.GH_PAT_CROSSREPO }}
          script: |
            const [owner, repo] = process.env.FORK_REPO.split('/');
            const target = 'preregistration needed';

            // 1) Grab the last 10 issues (all states)
            const { data: recent } = await github.rest.issues.listForRepo({
              owner, repo,
              state: 'all',
              per_page: 10,
              sort: 'created',
              direction: 'desc'
            });

            // 2) Try exact match
            let found = recent.find(i => i.title.toLowerCase() === target);

            // 3) If no exact, run Levenshtein ≤3
            if (!found) {
              const lev = (a, b) => {
                const dp = Array.from({ length: a.length + 1 }, () => []);
                for (let i = 0; i <= a.length; i++) dp[i][0] = i;
                for (let j = 0; j <= b.length; j++) dp[0][j] = j;
                for (let i = 1; i <= a.length; i++) {
                  for (let j = 1; j <= b.length; j++) {
                    dp[i][j] = a[i-1] === b[j-1]
                      ? dp[i-1][j-1]
                      : 1 + Math.min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]);
                  }
                }
                return dp[a.length][b.length];
              };
              found = recent.find(i => lev(i.title.toLowerCase(), target) <= 3);
            }

            // 4) If still not found → error
            if (!found) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo:  context.repo.repo,
                issue_number: context.issue.number,
                body: `🚫 Milestone 4 not complete. Please open an issue called “Preregistration needed” in your fork and then run \`/done 4\` again.`
              });
              return;
            }

            // 5) Cross off “4.”, reveal “5.”
            const updated = context.payload.issue.body
              .replace(/^(\s*-\s*\[)\s\](\s*4\..*)$/m, '$1x]$2')
              + '\n- [ ] 5. Close an issue';
              
              //.replace(/\n*<img[^>]*>.*$/m, `\n- [ ] 5. Close an issue\n\n<img src="https://${context.repo.owner}.github.io/${context.repo.repo}/assets/close_issue.gif" alt="Close Issue GIF">`);

            await github.rest.issues.update({
              owner: context.repo.owner,
              repo:  context.repo.repo,
              issue_number: context.issue.number,
              body: updated,
              state: 'open'
            });

            // 6) Celebrate
            const forkIssues = await github.rest.issues.listForRepo({
              owner, repo,
              state: 'open',
              per_page: 10
            });
            const firstIssue = forkIssues.data.find(i =>
              i.title.toLowerCase() === 'create your own first issue'
            );
            const firstIssueUrl = firstIssue.html_url;
            const milestone4BodyLines = [
              '🎉 Milestone 4 complete - "Open a issue"!',
              '',
              `**Task:** Milestone 5 is now available, go back to your first Issue read the new comment: ${firstIssueUrl}`,
              '',
              `**Afterwards:** Comment \`/done 5\` here.`,
            ];
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo:  context.repo.repo,
              issue_number: context.issue.number,
              body: milestone4BodyLines.join('\n')
            });

            // 7) Notify the "Create your own first issue" in the fork
            const preregistrationUrl = context.payload.issue.html_url;
            if (firstIssue) {
              await github.rest.issues.createComment({
                owner, repo,
                issue_number: firstIssue.number,
                body: `@${context.actor}, you’ve completed step 4, now close this issue and comment \`/done 5\` here: ${preregistrationUrl}!`
              });
            }
    # 5.1) Verify "Create your own first issue" is closed in the fork
      - name: Verify milestone 5
        id: verify-5
        if: steps.parse.outputs.result == '5'
        uses: actions/github-script@v7
        env:
          FORK_REPO: ${{ steps.vars.outputs.fork_repo }}
        with:
          github-token: ${{ secrets.GH_PAT_CROSSREPO }}
          script: |
            const [forkOwner, forkRepo] = process.env.FORK_REPO.split('/');

            // 1) First verify the "Create your own first issue" is closed
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: forkOwner, repo: forkRepo, state: 'all', per_page: 100
            });
            const intro = issues.find(i =>
              i.title.toLowerCase() === 'create your own first issue'
            );

            if (!intro || intro.state !== 'closed') {
              const url = intro
                ? intro.html_url
                : `https://github.com/${forkOwner}/${forkRepo}/issues`;
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `🚫 Milestone 5 not complete. Please close ["Create your own first issue"](${url}) in your fork, then run \`/done 5\` again.`
              });
              return; // Exit early
            }

            // 2) Extract the fork SHA from the issue body
            const issueBody = context.payload.issue.body;
            const shaMatch = issueBody.match(/Fork sha:\s*`([a-f0-9]{40})`/);
            if (!shaMatch) {
              throw new Error('Could not find fork SHA in issue body');
            }
            const forkSha = shaMatch[1];

            // 3) Store branch name for next step
            const timestamp = Date.now();
            const branchName = `preregistration/pr-${context.actor}-${timestamp}`;
            core.setOutput('branch_name', branchName);
            core.setOutput('fork_sha', forkSha);
            core.setOutput('fork_owner', forkOwner);
            core.setOutput('fork_repo', forkRepo);

      - name: Create branch and commit with upstream permissions
        id: create-branch
        if: steps.parse.outputs.result == '5' && steps.verify-5.outputs.branch_name
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_PAT_UPSTREAM }}
          script: |
            const branchName = '${{ steps.verify-5.outputs.branch_name }}';
            const forkSha = '${{ steps.verify-5.outputs.fork_sha }}';
            const { data: mainRef } = await github.rest.git.getRef({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    ref: 'heads/main'
                  });
            const mainSha = mainRef.object.sha;

            // Create branch in upstream from fork SHA
            await github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `refs/heads/${branchName}`,
              sha: mainSha
            });
            const { data: preregistration_file } = await github.rest.repos.getContent({
              owner: context.repo.owner,
              repo: context.repo.repo,
              path: 'prereg_draft.md'
            });
            const preregistrationContent = Buffer.from(preregistration_file.content, 'base64').toString();
            
            // Get current file SHA if it exists
            let fileSha = null;
            try {
              const { data: file } = await github.rest.repos.getContent({
                owner: context.repo.owner,
                repo: context.repo.repo,
                path: 'preregistration.md',
                ref: branchName
              });
              fileSha = file.sha;
            } catch (e) {
              // File doesn't exist, which is fine
            }
            
            // Overwrite the file
            await github.rest.repos.createOrUpdateFileContents({
              owner: context.repo.owner,
              repo: context.repo.repo,
              path: 'preregistration.md',
              message: `Update preregistration for ${context.actor}`,
              content: Buffer.from(preregistrationContent).toString('base64'),
              branch: branchName,
              sha: fileSha
            });
              core.setOutput('branch_name', branchName);

      - name: Create PR and update issue
        if: steps.parse.outputs.result == '5' && steps.create-branch.outputs.branch_name
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_PAT_CROSSREPO }}
          script: |
            const branchName = '${{ steps.verify-5.outputs.branch_name }}';
            const forkOwner = '${{ steps.verify-5.outputs.fork_owner }}';
            const forkRepo = '${{ steps.verify-5.outputs.fork_repo }}';

            // Get fork's default branch
            const { data: forkData } = await github.rest.repos.get({
              owner: forkOwner,
              repo: forkRepo
            });
            const forkDefaultBranch = forkData.default_branch;

            const prBodyLines = [
              '## :eyes: Review Instructions',
              '',
              '**Task:**',
              'Go to the "Files changed" tab of this PR and add a suggestion for improvement.',
              '- Modify content in Hypotheses to an exponent of 2.',
              '',
              '> *Hint: To add a suggestion, click the "+" symbol next to a line, type your improved text in a suggestion block, and submit the comment.*',
              '',
              `After adding your suggestion, return to ${context.payload.issue.html_url} and comment \`/done 6\` to continue.`,
              '',
              '<img src="https://raw.githubusercontent.com/HannesDiemerling/repro-collab/main/gifs/make_suggestion.gif" alt="Make Suggestion GIF">'
            ];

            // Create PR from upstream branch to fork
            const { data: pr } = await github.rest.pulls.create({
              owner: forkOwner,
              repo: forkRepo,
              title: 'Review this preregistration update',
              head: `${context.repo.owner}:${branchName}`,
              base: forkDefaultBranch,
              body: prBodyLines.join('\n'),
              maintainer_can_modify: true
            });
              
            // Update the upstream issue checklist
            const updatedBody5 = context.payload.issue.body
                .replace(/^(\s*-\s*\[)\s\](\s*5\..*)$/m, '$1x]$2')
                + '\n- [ ] 6. Add a suggestion to the PR';

                //.replace(/\n*<img[^>]*>.*$/m, `\n- [ ] 6. Review and merge a PR\n\n<img src="https://${context.repo.owner}.github.io/${context.repo.repo}/assets/review_pr.gif" alt="Review PR GIF">`);
              
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: updatedBody5,
              state: 'open'
            });

            // Comment on the upstream issue
            const milestone5BodyLines = [
              '🎉 Milestone 5 complete - "Close an issue"!',
              '',
              `**Task:** Milestone 6 is now available. Review the pull request (PR) I created in your fork: ${pr.html_url}`,
              '',
              'Add a suggestion to improve the code using GitHub\'s suggestion feature, more detail in our PR.',
              '',
              `**Afterwards:** Comment \`/done 6\` here.`,
            ];
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: milestone5BodyLines.join('\n')
            });
            

      - name: Add a PR Suggestion
        if: steps.parse.outputs.result == '6'
        uses: actions/github-script@v7
        env:
          FORK_REPO: ${{ steps.vars.outputs.fork_repo }}
        with:
          github-token: ${{ secrets.GH_PAT_CROSSREPO }}
          script: |
            const [owner, repo] = process.env.FORK_REPO.split('/');
            
            // Find the PR we created
            const { data: prs } = await github.rest.pulls.list({
              owner, repo,
              state: 'all',
              per_page: 20,
              sort: 'created',
              direction: 'desc'
            });
            
            const pr = prs.find(pr =>
              pr.title === 'Review this preregistration update'
            );
            
            if (!pr) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: '🚫 Could not find the PR. Please check your fork for the preregistration PR.'
              });
              return;
            }
            
            // Check for review comments with suggestions
            const { data: reviews } = await github.rest.pulls.listReviews({
              owner, repo,
              pull_number: pr.number
            });
            
            let hasSuggestion = false;
            for (const review of reviews) {
              const { data: comments } = await github.rest.pulls.listCommentsForReview({
                owner, repo,
                pull_number: pr.number,
                review_id: review.id
              });
              
              if (comments.some(c => c.body.includes('```suggestion'))) {
                hasSuggestion = true;
                break;
              }
            }
            
            // Also check single comments
            if (!hasSuggestion) {
              const { data: prComments } = await github.rest.pulls.listReviewComments({
                owner, repo,
                pull_number: pr.number
              });
              
              hasSuggestion = prComments.some(c => c.body.includes('```suggestion'));
            }
            
            if (!hasSuggestion) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `🚫 Milestone 6 not complete. Please add a suggestion to the PR using GitHub's suggestion feature. Go to the "Files changed" tab in your PR: ${pr.html_url}, click on a line and add a suggestion, then run \`/done 6\` again.`
              });
              return;
            }
            
            // Update issue body
            const updatedBody6 = context.payload.issue.body
              .replace(/^(\s*-\s*\[)\s\](\s*6\..*)$/m, '$1x]$2')
              + '\n- [ ] 7. Merge the pull request';
            
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: updatedBody6,
              state: 'open'
            });
            
            // Success comment
            const milestone6BodyLines = [
              '🎉 Milestone 6 complete - "Add a PR suggestion"!',
              '',
              `**Task:** Milestone 7 is now available. Time to merge your pull request: ${pr.html_url}`,
              '',
              'Click the "Merge pull request" button to complete the PR workflow.',
              '',
              `**Afterwards**: comment \`/done 7\` here.`
            ];
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: milestone6BodyLines.join('\n')
            });
 
      - name: Merge PR
        if: steps.parse.outputs.result == '7'
        uses: actions/github-script@v7
        env:
          FORK_REPO: ${{ steps.vars.outputs.fork_repo }}
        with:
          github-token: ${{ secrets.GH_PAT_CROSSREPO }}
          script: |
            const [owner, repo] = process.env.FORK_REPO.split('/');
            
            // Find the PR we created
            const { data: prs } = await github.rest.pulls.list({
              owner, repo,
              state: 'all',
              per_page: 20,
              sort: 'created',
              direction: 'desc'
            });
            
            const ourPr = prs.find(pr =>
              pr.title === 'Review this preregistration update'
            );
            
            if (!ourPr) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: '🚫 Could not find the PR. Please check your fork for the preregistration PR.'
              });
              return;
            }
            
            //Hotfix, check if closed for robustness
            if (ourPr.state !== 'closed') {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `🚫 Milestone 7 not complete. Please merge or close the pull request: ${ourPr.html_url}. Make sure all checks have passed, then click "Merge pull request" and run \`/done 7\` again.`
              });
              return;
            }
            
            // Cross off “7.”, reveal “8.”
            const updatedBody7 = context.payload.issue.body
              .replace(/^(\s*-\s*\[)\s\](\s*7\..*)$/m, '$1x]$2')
              + '\n- [ ] 8. Find your group';
            
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: updatedBody7,
              state: 'open'
            });
            
            // Final success comment
            const workshopCompleteLines = [
              `🎉 **Congratulations @${context.actor}!** 🎉`,
              '',
              'You completed everything you can do alone:',
              '',
              'You\'ve mastered:',
              '- ✅ Forking repositories',
              '- ✅ Handling issues',
              '- ✅ Reviewing & merging PRs',
              '',
              'Now you need a partner. The goal of the next task is to find a partner with a different experience level.',
              '',
              '---',
              '',
              '**Task**: Stand up and move to the marked corner.',
              '',
              '1. ➡️ Form a line.',
              '2. ➡️ Discuss with your neighbor the following questions:',
              '    * What makes an ideal issue?',
              '    * How can issues be used to organize tasks and responsibilities?',
              '    * Imagine you want to give feedback to your student, collaborator, etc. how do usually provide it? How could you use GitHub?',
              '    * What can you use PRs for?',
              '    * What aspects of your workflow are difficult to translate to GitHub?',
              '3. ➡️ When you are done with the discussion, move down to the other end of the line and chose a partner',
              '4. ➡️ Participate in their discussion till the time is up.',
              '<img src="https://${context.repo.owner}.github.io/${context.repo.repo}/assets/pair-finding.svg" alt="Visual explanation of the partner finding exercise.">',
            ];

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: workshopCompleteLines.join('\n')
            });
      # Milestone 8: Build groups
      - name: Verify milestone 8
        if: steps.parse.outputs.result == '8'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_PAT_CROSSREPO }}
          script: |
            // Cross off “8.”, reveal “9.”
            const updatedBody8 = context.payload.issue.body
              .replace(/^(\s*-\s*\[)\s\](\s*8\..*)$/m, '$1x]$2')
              + '\n- [ ] 9. Generate and Upload Steven Data.';
            
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: updatedBody8,
              state: 'open'
            });
            
            // Success comment
            const milestone8BodyLines = [
              '🎉 Great that you found your partner!',
              '',
              '**Milestone 9 is now available: Generate data together**',
              '',
              'In this milestone, you will:',
              '1. Use a Shiny app to generate synthetic data',
              '2. Upload the data to the **less experienced** partner\'s fork',
              '3. Collaborate on managing the data',
              '',
              '**Important:** Only the less experienced GitHub user should run `/done 9` after completing all tasks.',
              '',
              'I\'ll create an issue with detailed instructions for both of you now...'
            ];
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: milestone8BodyLines.join('\n')
            });

      # Milestone 9: Generate and upload data
      - name: Verify milestone 9
        if: steps.parse.outputs.result == '9'
        uses: actions/github-script@v7
        env:
          FORK_REPO: ${{ steps.vars.outputs.fork_repo }}
        with:
          github-token: ${{ secrets.GH_PAT_CROSSREPO }}
          script: |
            const [owner, repo] = process.env.FORK_REPO.split('/');
            
            // 1) Check for 2 contributors (excluding aaronpeikert)
            const { data: contributors } = await github.rest.repos.listContributors({
              owner, repo,
              per_page: 100
            });
            
            const validContributors = contributors.filter(c => 
              c.login.toLowerCase() !== 'aaronpeikert'
            );
            
            if (validContributors.length < 2) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: '🚫 Milestone 9 not complete. We need at least 2 contributors (excluding aaronpeikert) in the fork. Make sure both partners have contributed to the repository, then run `/done 9` again.'
              });
              return;
            }
            
            // 2) Check for Data folder with files
            let dataFiles = [];
            try {
              const { data: contents } = await github.rest.repos.getContent({
                owner, repo,
                path: 'Data'
              });
              
              if (Array.isArray(contents)) {
                dataFiles = contents.filter(item => 
                  item.type === 'file' && 
                  (item.name.endsWith('.csv') || item.name.endsWith('.txt') || item.name.endsWith('.json'))
                );
              }
            } catch (error) {
              // Data folder doesn't exist
            }
            
            if (dataFiles.length < 2) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: '🚫 Milestone 9 not complete. Please create a "Data" folder in the fork and upload at least 2 data files (e.g., .csv, .txt, or .json files) generated from the Shiny app. Then run `/done 9` again.'
              });
              return;
            }
            
            // Cross off “9.”, reveal “10.”
            const updatedBody9 = context.payload.issue.body
              .replace(/^(\s*-\s*\[)\s\](\s*9\..*)$/m, '$1x]$2')
              + '\n- [ ] 10. Collaborate on issues';
            
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: updatedBody9,
              state: 'open'
            });
            
            // 4) Success comment
            const milestone9BodyLines = [
              '🎉 Milestone 9 complete - "Generate data together"!',
              '',
              '**Excellent collaboration!** I found:',
              `- ✅ ${validContributors.length} contributors in the fork`,
              `- ✅ ${dataFiles.length} data files in the Data folder`,
              '',
              'Your teamwork on data generation was successful! The data is now ready for analysis.',
              '',
              '**Milestone 10 is now available.**',
              '',
              `Comment \`/done 10\` to receive your final collaborative tasks.`
            ];
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: milestone9BodyLines.join('\n')
            });

      # Milestone 10: Create collaboration issues
      - name: Verify milestone 10
        if: steps.parse.outputs.result == '10'
        uses: actions/github-script@v7
        env:
          FORK_REPO: ${{ steps.vars.outputs.fork_repo }}
        with:
          github-token: ${{ secrets.GH_PAT_CROSSREPO }}
          script: |
            const [owner, repo] = process.env.FORK_REPO.split('/');
            const preregistrationUrl = context.payload.issue.html_url;
            
            // Create three collaboration issues in the fork
            const issue1 = await github.rest.issues.create({
              owner, repo,
              title: 'Extend the preregistration document',
              body: [
                '## Task: Expand the preregistration with additional sections',
                '',
                'Our preregistration needs more detail to be publication-ready.',
                '',
                '**Action items:**',
                '- [ ] Add a "Data Collection" section describing the synthetic data generation',
                '- [ ] Include a "Sample Size Justification" section',
                '- [ ] Add an "Exclusion Criteria" section',
                '- [ ] Review and update the existing content for clarity',
                '',
                '**Tips:**',
                '- Use clear, academic language',
                '- Reference the data files in the Data folder',
                '- Collaborate through PR reviews',
                '',
                '**Assign this issue to one team member and work together!**'
              ].join('\n')
            });
            
            const issue2 = await github.rest.issues.create({
              owner, repo,
              title: 'Revise and refine hypotheses',
              body: [
                '## Task: Update the hypotheses based on your data structure',
                '',
                'Now that we have our data, let\'s ensure our hypotheses are properly aligned.',
                '',
                '**Action items:**',
                '- [ ] Review the current hypotheses in `preregistration.md`',
                '- [ ] Make them more specific and testable',
                '- [ ] Add predicted effect sizes based on the data',
                '- [ ] Include null and alternative hypotheses',
                '- [ ] Consider adding a third hypothesis if appropriate',
                '',
                '**Remember:**',
                '- Hypotheses should be falsifiable',
                '- They should directly relate to the variables in your dataset',
                '- Use the issue comments to discuss before making changes',
                '',
                '**This is a great opportunity to practice collaborative editing!**'
              ].join('\n')
            });
            
            const issue3 = await github.rest.issues.create({
              owner, repo,
              title: 'Add all authors to the preregistration',
              body: [
                '## Task: Update author information',
                '',
                'Both team members should be credited as authors!',
                '',
                '**Action items:**',
                '- [ ] Add both team members\' names to the author section',
                '- [ ] Include affiliations (can be fictional for the workshop)',
                '- [ ] Add ORCID IDs (use 0000-0000-0000-0000 as placeholder)',
                '- [ ] Specify author contributions (CRediT taxonomy)',
                '',
                '**CRediT roles to consider:**',
                '- Conceptualization',
                '- Data curation',
                '- Formal analysis',
                '- Investigation',
                '- Methodology',
                '- Project administration',
                '- Writing – original draft',
                '- Writing – review & editing',
                '',
                '**Make sure both partners are properly acknowledged!**'
              ].join('\n')
            });
            
            // Update main issue - mark 10 complete
            const updatedBody10 = context.payload.issue.body
              .replace(/^(\s*-\s*\[)\s\](\s*10\..*)$/m, '$1x]$2');
            
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: updatedBody10,
              state: 'open'
            });
            
            // Final success comment
            const milestone10BodyLines = [
              '🎉 **Milestone 10 complete - Workshop finished!** 🎉',
              '',
              `Congratulations @${context.actor} and your partner! You\'ve completed all milestones!`,
              '',
              '**I\'ve created 3 final collaboration issues in your fork:**',
              `1. [Extend the preregistration document](${issue1.data.html_url})`,
              `2. [Revise and refine hypotheses](${issue2.data.html_url})`,
              `3. [Add all authors to the preregistration](${issue3.data.html_url})`,
              '',
              '**Your final tasks (work on these together):**',
              '- 📋 Assign issues to team members',
              '- 💬 Use comments to discuss and plan',
              '- 🏷️ Add labels to organize your work',
              '- ✅ Close issues as you complete them',
              '- 🔄 Create PRs for major changes',
              '',
              '**Resources for effective collaboration:**',
              '- [GitHub Flow Guide](https://guides.github.com/introduction/flow/)',
              '- [Collaborating with Issues and PRs](https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests)',
              '- [Code Review Best Practices](https://github.com/features/code-review)',
              '',
              '---',
              '',
              '### 🏁 Workshop Complete!',
              '',
              'You\'ve successfully learned:',
              '✅ GitHub basics (forking, issues, PRs)',
              '✅ Collaborative workflows',
              '✅ Code review through suggestions',
              '✅ Project management with issues',
              '✅ Team-based development',
              '',
              'These skills will serve you well in research collaborations and open science projects!',
              '',
              '**Thank you for participating! Keep collaborating and exploring GitHub!** 🚀',
              '',
              '*Feel free to continue working on the issues at your own pace. There are no more `/done` commands.*'
            ];
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: milestone10BodyLines.join('\n')
            });

      # Create data generation issue immediately after milestone 8
      - name: Create data generation issue after milestone 8
        if: steps.parse.outputs.result == '8'
        uses: actions/github-script@v7
        env:
          FORK_REPO: ${{ steps.vars.outputs.fork_repo }}
        with:
          github-token: ${{ secrets.GH_PAT_CROSSREPO }}
          script: |
            const [owner, repo] = process.env.FORK_REPO.split('/');
            const preregistrationUrl = context.payload.issue.html_url;
            
            const dataGenIssue = await github.rest.issues.create({
              owner, repo,
              title: 'Generate and upload research data',
              body: [
                '## 👥 Partner Task: Generate and upload synthetic data',
                '',
                '### Step 1: Generate Data',
                'Visit: [link] and generate data together (recommended: 20 trials)',
                '',
                '### Step 2: Upload to GitHub',
                '**Upload to the less experienced partner\'s fork:**',
                '',
                '1. Navigate to your fork on GitHub',
                '2. Create/navigate to `Data/` folder (if it doesn\'t exist yet)',
                '3. Upload your generated data file(s)',
                '4. Commit,
                '',
                '### Step 3: Mark Complete',
                `Return to: ${preregistrationUrl} and comment \`/done 9\``,
                '',
                '---',
                '',
                '📋 **Alternative upload methods & help:** [GitHub Upload Cheat Sheet](https://docs.github.com/en/repositories/working-with-files/managing-files/adding-a-file-to-a-repository)',
                '',
              ].join('\n')
            });
            
            // Also comment in the main issue with the link
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `📋 I've created a detailed guide for generating and uploading data in your fork: ${dataGenIssue.data.html_url}\n\nPlease read it carefully with your partner before proceeding.`
            });